## PUSH NOTIFICATIONS ROLE

#!trydef KZ_PN_LOG_CONTACT 0
#!trydef KZ_PN_ALWAYS_PUSH 0
#!trydef KZ_PN_INITIAL_INVITE_NO_RESPONSE_TIMER 2000
#!trydef KZ_PN_PUSH_NO_RESPONSE_TIMER 20000
#!trydef KZ_PN_INVITE_NO_RESPONSE_TIMER 30000

kazoo.pn_log_contacts = KZ_PN_LOG_CONTACT descr "logs contacts after registration"
kazoo.pn_always_push = KZ_PN_ALWAYS_PUSH descr "ignores registration and always push"
kazoo.pn_initial_invite_no_response_timer = KZ_PN_INITIAL_INVITE_NO_RESPONSE_TIMER descr "timer for initial invite"
kazoo.pn_push_no_response_timer = KZ_PN_PUSH_NO_RESPONSE_TIMER descr "timer for push"
kazoo.pn_invite_no_response_timer = KZ_PN_INVITE_NO_RESPONSE_TIMER descr "timer for invite after push confirmation with registration"

######## Generic Hash Table container in shared memory ########
modparam("htable", "htable", "push_cache=>autoexpire=60;")

####### http_client moduel #######
loadmodule "http_client.so"
modparam("http_client", "connection_timeout", 2)
modparam("http_client", "keep_connections", 1)
modparam("http_client", "httpcon", "pushsrv=>PUSH_NOTIFICATIONS_URL")

route[PN_ROUTE]
{
   if ( (!is_method("INVITE")) || (!isflagset(FLAG_INTERNALLY_SOURCED)) || $hdr(X-KAZOO-PUSHER-Token-ID) == $null) return;

   xlog("L_INFO", "start deliver call to $hdr(X-KAZOO-PUSHER-Token-ID)\n");
   $sht(push_cache=>AOR$ci) = $hdr(X-KAZOO-AOR);
   $var(push_is_prepared) = 0;
   route(PN_PREPARE_PUSH);
   if ($var(push_is_prepared) == 1) {
      if ($sel(cfg_get.kazoo.pn_always_push) == 0 &&
          ($hdr(X-KAZOO-PUSHER-Force-Push) == $null || $hdr(X-KAZOO-PUSHER-Force-Push) != "true") &&
          reg_fetch_contacts("location", "$hdr(X-KAZOO-AOR)", "callee")
         ) {
         $du = $(ulc(callee=>received));
         $fs = $(ulc(callee=>socket));
         xlog("L_INFO", "routing $hdr(X-KAZOO-AOR) to contact $du\n");
         send_reply(100, "calling a push device");
         $var(timer) = $(sel(cfg_get.kazoo.pn_initial_invite_no_response_timer){s.int});
         route(PN_SETUP_TIMERS);
         t_set_fr(0, $xavp(push_timers=>t1));
         route(PN_TO_EXTERNAL_RELAY);
      } else {
         send_reply(100, "waking the push device");
         route(PN_SEND_PUSH_NOTIFICATION);
      }
   }
   exit();
}

route[PN_SETUP_TIMERS]
{
   $xavp(push_timers=>t1) = $(sel(cfg_get.kazoo.pn_initial_invite_no_response_timer){s.int});
   $xavp(push_timers[0]=>t2) = $(sel(cfg_get.kazoo.pn_push_no_response_timer){s.int});
   $xavp(push_timers[0]=>t3) = $(sel(cfg_get.kazoo.pn_invite_no_response_timer){s.int});

   if ($hdr(X-KAZOO-PUSHER-Initial-Invite-Timeout) == $null) {
      $xavp(push_timers[0]=>t1) = $(hdr(X-KAZOO-PUSHER-Initial-Invite-Timeout){s.int});
   }

   if ($hdr(X-KAZOO-PUSHER-Push-Timeout) == $null) {
      $xavp(push_timers[0]=>t2) = $(hdr(X-KAZOO-PUSHER-Push-Timeout){s.int});
   }

   if ($hdr(X-KAZOO-PUSHER-Invite-Timeout) == $null) {
      $xavp(push_timers[0]=>t3) = $(hdr(X-KAZOO-PUSHER-Invite-Timeout){s.int});
   }

}

route[PN_TO_EXTERNAL_RELAY]
{
   record_route();
   route(REMOVE_RESERVED_HEADERS);
   set_forward_no_connect();
   t_on_branch("MANAGE_BRANCH");
   t_on_reply("EXTERNAL_REPLY");
   t_on_failure("PN_EXTERNAL_FAULT");
   t_relay();
}

failure_route[PN_EXTERNAL_FAULT]
{
   if (!t_check_status("486|487|603") && $avp(push_sent) != 1) {
      send_reply(182, "sending push notification");
      route(PN_SEND_PUSH_NOTIFICATION);
   } else if (t_check_status("487")) {
      xlog("L_INFO", "push transaction canceled\n");
      t_reply("$T_reply_code", "pusher canceled");
   } else {
      xlog("L_INFO", "push transaction result - $T_reply_code\n");
      t_reply("$T_reply_code", "pusher failed");
   }
}

route[PN_CANCEL] {
    $var(reason) = $hdr(Reason);
    $var(cause) = $(var(reason){s.select,1,;});
    $var(cause_code) = $(var(cause){s.select,1,=});
    xlog("L_INFO", "$ci|pusher|push cancel call reason - $var(cause) code - $var(cause_code)\n");
    if($var(cause_code) != 200) 
        route(MISSED_CALL_PUSH);
}

route[MISSED_CALL_PUSH] {
    if (is_present_hf("X-KAZOO-AOR"))
        $var(AOR) = $hdr(X-KAZOO-AOR);
    else
        $var(AOR) = $sht(push_cache=>AOR$ci);
    if ($var(AOR) != 0) {
        xlog("L_INFO", "$ci: sending missed call notification push for $var(AOR)");
        $var(fn) = $(fn{s.replace,",});
        $var(payload) = '{"name":"'+$var(AOR)+'", "app_name":"PUSH_NOTIFICATIONS_APP_NAME", "type":"missed_call", "mutable":true, "sound":"default", "text":"Missed call from '+$fU+'", "payload":{"remote_name":"'+$var(fn)+'", "remote_number":"'+$fU+'", "local_number":"'+$var(AOR)+'","push_id":"'+$ci+'"}}';
        http_connect("pushsrv", "/api/v1/send", "application/json", $var(payload), "$avp(result)");
        xlog("L_ERR", "$ci: can not wake up the user $var(AOR)\n");
    }
}

route[PN_PREPARE_PUSH]
{
   $var(nt) = t_newtran();
   if ($var(nt) != 0) {
      route(REMOVE_RESERVED_HEADERS);
      t_save_lumps();
      t_set_auto_inv_100(0);
      $var(push_is_prepared) =  1;
   } else {
      sl_send_reply(500, "error creating transaction for waking the dead guy");
   }
}

route[PN_SEND_PUSH_NOTIFICATION]
{
   xlog("L_INFO", "sending push notification request\n");
   t_set_fr($xavp(push_timers=>t2), $xavp(push_timers=>t2));
   $avp(push_sent) = 1;
   t_suspend();
   $sht(push_cache=>$(tu{s.tolower})) = $_s(a=0;index=$T(id_index);label=$T(id_label));
   route(NEWCALL_PUSH);
}

route[NEWCALL_PUSH] {
    xlog("L_INFO", "$ci: sending new call notification push for $hdr(X-KAZOO-AOR)");
    $var(fn) = $(fn{s.replace,",});
    if (is_present_hf("Alert-Info")) {
        $var(ring_tone) = $_s(, "ring_tone":"$hdr(Alert-Info)");
    } else {
        $var(ring_tone) = "";
    }
    $var(payload) = '{"name":"'+$hdr(X-KAZOO-AOR)+'", "app_name":"PUSH_NOTIFICATIONS_APP_NAME", "expiry":20, "type":"incoming_call", "silent":true, "payload":{"remote_name":"'+$var(fn)+'", "remote_number":"'+$fU+'", "local_number":"'+$hdr(X-KAZOO-AOR)+'", "inception_number":"'+$hdr(X-ooma-inception-number)+'", "push_id":"'+$ci+'"' +$var(ring_tone)+ '}}';
    $var(response) = http_connect("pushsrv", "/api/v1/send", "application/json", $var(payload), "$avp(result)");        
    if ($var(response) != 200) {
        xlog("L_ERR","$ci: Failed to send push for $hdr(X-KAZOO-AOR). response: $var(response)");
        sl_send_reply("404", "Not Found");
        exit;
    }
    return;
}

route[HANDLE_REGISTER_PN]
{
   if (!is_method("REGISTER")) return;

   if($hdr(X-Token-Reg) != $null) {
      if($sht(push_cache=>$hdr(X-Token-Reg)) != $null) {
         $sht(push_cache=>$hdr(X-Token-Reg)) = $null;
         xlog("L_INFO", "registration with x-token-reg $hdr(X-Token-Reg)\n");
         $xavp(regpub=>custom_channel_vars) = "{}";
         $xavp(ulattrs=>x_token_reg) = $hdr(X-Token-Reg);
         route(SAVE_LOCATION);
         exit;
      } else {
         xlog("L_INFO", "registration x-token-reg '$hdr(X-Token-Reg)' from header was not found\n");
      }
   }

   if($(sel(contact.uri){uri.param,x-token-reg}) != "") {
      if($sht(push_cache=>$(sel(contact.uri){uri.param,x-token-reg})) != $null) {
         $sht(push_cache=>$(sel(contact.uri){uri.param,x-token-reg})) = $null;
         xlog("L_INFO", "registration with x-token-reg $(sel(contact.uri){uri.param,x-token-reg})\n");
         $xavp(regpub=>custom_channel_vars) = "{}";
         $xavp(ulattrs=>x_token_reg) = $(sel(contact.uri){uri.param,x-token-reg});
         route(SAVE_LOCATION);
         exit;
      } else {
         xlog("L_INFO", "registration x-token-reg from contact uri param '$(sel(contact.uri){uri.param,x-token-reg})' was not found\n");
      }
   }

   if($(sel(contact){tobody.params}{param.value,x-token-reg}) != "") {
      if($sht(push_cache=>$(sel(contact){tobody.params}{param.value,x-token-reg})) != $null) {
         $sht(push_cache=>$(sel(contact){tobody.params}{param.value,x-token-reg})) = $null;
         xlog("L_INFO", "registration with x-token-reg $(sel(contact){tobody.params}{param.value,x-token-reg})\n");
         $xavp(regpub=>custom_channel_vars) = "{}";
         $xavp(ulattrs=>x_token_reg) = $(sel(contact){tobody.params}{param.value,x-token-reg});
         route(SAVE_LOCATION);
         exit;
      } else {
         xlog("L_INFO", "registration x-token-reg from contact param '$(sel(contact){tobody.params}{param.value,x-token-reg})' was not found\n");
      }
   }
}

route[ON_REGISTRATION_PN]
{
   if( ( $(xavp(ulattrs=>x_token_reg){s.len}) > 0 ||
         $(xavp(ulattrs=>custom_channel_vars){kz.json,Pusher-Application}{s.len}) > 0) &&
         $var(Status) == "Registered") {
      if($sht(push_cache=>$(tu{s.tolower})) != $null) {
         xlog("L_INFO", "device registered, delivering the call\n");
         $var(ref) = $sht(push_cache=>$(tu{s.tolower}));
         $sht(push_cache=>$(tu{s.tolower})) = $null;
         $var(t_index) = $(var(ref){param.value,index}{s.int});
         $var(t_label) = $(var(ref){param.value,label}{s.int});
         t_continue("$var(t_index)", "$var(t_label)", "PN_DELIVER_CALL");
      }
   }
}

route[PN_DELIVER_CALL]
{
   if(reg_fetch_contacts("location", "$hdr(X-KAZOO-AOR)", "callee")) {
      if($sel(cfg_get.kazoo.pn_log_contacts) == 1) {
         xlog("L_NOTICE", "callee=>aor: $(ulc(callee=>aor))\n");
         xlog("L_NOTICE", "callee=>count: $(ulc(callee=>count))\n");
         xlog("L_NOTICE", "callee=>domain: $(ulc(callee=>domain))\n");
         xlog("L_NOTICE", "callee=>aorhash $(ulc(callee=>aorhash))\n");
         $var(i) = 0;
         while($var(i) < $(ulc(callee=>count))) {
            xlog("L_NOTICE", "--- contact [$var(i)]\n");
            xlog("L_NOTICE", "callee=>addr:       $(ulc(callee=>addr)[$var(i)])\n");
            xlog("L_NOTICE", "callee=>path:       $(ulc(callee=>path)[$var(i)])\n");
            xlog("L_NOTICE", "callee=>received:   $(ulc(callee=>received)[$var(i)])\n");
            xlog("L_NOTICE", "callee=>expires:    $(ulc(callee=>expires)[$var(i)])\n");
            xlog("L_NOTICE", "callee=>callid:     $(ulc(callee=>callid)[$var(i)])\n");
            xlog("L_NOTICE", "callee=>regid:      $(ulc(callee=>regid)[$var(i)])\n");
            xlog("L_NOTICE", "callee=>q:          $(ulc(callee=>q)[$var(i)])\n");
            xlog("L_NOTICE", "callee=>cseq:       $(ulc(callee=>cseq)[$var(i)])\n");
            xlog("L_NOTICE", "callee=>flags:      $(ulc(callee=>flags)[$var(i)])\n");
            xlog("L_NOTICE", "callee=>cflags:     $(ulc(callee=>cflags)[$var(i)])\n");
            xlog("L_NOTICE", "callee=>user_agent: $(ulc(callee=>user_agent)[$var(i)])\n");
            xlog("L_NOTICE", "callee=>socket:     $(ulc(callee=>socket)[$var(i)])\n");
            xlog("L_NOTICE", "callee=>modified:   $(ulc(callee=>modified)[$var(i)])\n");
            xlog("L_NOTICE", "callee=>methods:    $(ulc(callee=>methods)[$var(i)])\n");
            $var(i) = $var(i) + 1;
         }
      }

      $var(idx) = $ulc(callee=>count) - 1;
      $du = $(ulc(callee=>received)[$var(idx)]);
      $fs = $(ulc(callee=>socket)[$var(idx)]);
      t_set_fr($xavp(push_timers=>t3), $xavp(push_timers=>t3));
      route(PN_TO_EXTERNAL_RELAY);
   } else {
      t_reply(486, "Failed to lookup after resume");
   }
}
