#!/bin/sh

sql_db_pre_setup() {
cat << EOF
START TRANSACTION;
EOF
}

sql_setup() {
cat << EOF
EOF
}

sql_header() {
cat << EOF
EOF
}

sql_extra_tables() {
cat << EOF
CREATE TABLE active_watchers_log (
    id SERIAL PRIMARY KEY NOT NULL,
    presentity_uri VARCHAR(128) NOT NULL,
    watcher_username VARCHAR(64) NOT NULL,
    watcher_domain VARCHAR(64) NOT NULL,
    to_user VARCHAR(64) NOT NULL,
    to_domain VARCHAR(64) NOT NULL,
    event VARCHAR(64) DEFAULT 'presence' NOT NULL,
    callid VARCHAR(255) NOT NULL,
    time INTEGER NOT NULL,
    result INTEGER NOT NULL,
    sent_msg BLOB NOT NULL,
    received_msg BLOB NOT NULL,
    user_agent VARCHAR(255) DEFAULT '' NOT NULL,
    CONSTRAINT active_watchers_active_watchers_log_idx UNIQUE (presentity_uri, watcher_username, watcher_domain, event)
);

CREATE TABLE tmp_probe(
  event TEXT,
  presentity_uri TEXT,
  action INT
);

CREATE TABLE auth_cache(
  id INT,
  key_name TEXT,
  key_type INT,
  value_type INT,
  key_value TEXT,
  expires INT
);

CREATE TABLE block_cache(
  id INT,
  key_name TEXT,
  key_type INT,
  value_type INT,
  key_value TEXT,
  expires INT
);

CREATE TABLE keepalive (
  id INTEGER PRIMARY KEY NOT NULL,
  contact VARCHAR(512) NOT NULL,
  received VARCHAR(32) NOT NULL,
  sockinfo VARCHAR(128) NOT NULL,
  time_inserted TIMESTAMP NOT NULL DEFAULT 0,
  time_sent TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  slot INTEGER NOT NULL,
  selected INTEGER DEFAULT 0,
  failed INTEGER DEFAULT 0,
  CONSTRAINT keepalive_idx UNIQUE (contact),
  CONSTRAINT keepalive_idx_2 UNIQUE (slot, failed, contact)
);

CREATE VIEW presentities as.
 select id, substring((concat('sip:',username,'@',domain)), 1,12) as presentity_uri,username,
 domain,event,substring(etag,instr(etag,'@')+1) as callid, from_unixtime(received_time) as received,
 from_unixtime(expires) as expire_date,expires, cast(sender as char(30)) as sender,
 lower(substring( case event when "dialog"
  then "confirmed"
   when "presence"
   then "Full state presence ducument"
   when "message-summary"
   then "Waiting".
  end, 1, 12)) as state
from presentity;

DELIMITER //
CREATE PROCEDURE p_delete_id_presentity()
 BEGIN
     CREATE TEMPORARY TABLE IF NOT EXISTS presentities_temp AS (SELECT * FROM presentities);
     DELETE FROM presentity WHERE id IN(select id from presentities_temp where event = "dialog" and state = "terminated" and received < NOW() - INTERVAL 5 MINUTE);
     DROP TABLE presentities_temp;
 END//
DELIMITER ;
EOF
}

sql_footer() {
cat << EOF
ALTER TABLE location_attrs MODIFY avalue varchar(512);
EOF
}
