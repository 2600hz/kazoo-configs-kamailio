##########
# JWT Keys
#
#########
modparam("htable", "htable", "jwt.keys=>size=4;dbtable=jwt_keys;dbmode=1;")

modparam("rtimer", "timer", "name=keys_reload;interval=20;mode=1;")
modparam("rtimer", "exec", "timer=keys_reload;route=JWT_KEYS_QUERY")

modparam("pv", "shvset", "jwt_keys_query=i:1")

#!trydef JWT_KEYS_AMQP_FLAGS 2048

### this maintains the keys in sync
route[JWT_KEYS_LOAD]
{
    $shv(jwt_keys_query) = 0;

    $var(amqp_payload_request) = $_s({"Event-Category" : "jwt.keys" , "Event-Name" : "query", "Request-Issuer": true, "Request-Identity": true});
    $var(amqp_routing_key) = "jwt.keys.query";

    xlog("L_DEBUG", "publishing to jwt.keys => $var(amqp_routing_key) : $var(amqp_payload_request)\n");
    if(kazoo_query("jwt.keys", $var(amqp_routing_key), $var(amqp_payload_request), "$def(JWT_KEYS_AMQP_FLAGS)") != 1) {
        if($(kzR{kz.json,Event-Name}) == "message_returned" ) {
            xlog("L_WARNING", "failed to load JWT keys, request returned by broker $(kzR{kz.json,Error-Code}) $(kzR{kz.json,Error-Reason})\n");
        } else {
            xlog("L_ERROR", "failed to load JWT keys: $kzR\n");
        }
        $shv(jwt_keys_query) = 1;
        return;
    }

    xlog("L_DEBUG", "got reply $kzR\n");

    sht_reset("jwt.keys");

    avp_delete("$avp(JWTKeys)/g");
    if(kazoo_json_keys($kzR, "Keys", "$avp(JWTKeys)") != 1) {
        xlog("L_DEBUG", "no keys\n");
    } else {
        $var(Count) = $cnt($avp(JWTKeys));
        $var(Idx) = 0;
        xlog("L_DEBUG", "loading $var(Count) keys\n");
        while($var(Idx) < $var(Count)) {
            $var(Key) = $(avp(JWTKeys)[$var(Idx)]);
            $var(Pem) = $(kzR{kz.json,Keys.$var(Key)});
            xlog("L_DEBUG", "set $var(Key) => $var(Pem)\n");
            $sht(jwt.keys=>$var(Key)) = $var(Pem);
            $var(Idx) = $var(Idx) + 1;
        }
        xlog("L_NOTICE", "loaded $var(Count) entries into jtw.keys table\n");
    }


    avp_delete("$avp(JWTKeys)/g");
    if(kazoo_json_keys($kzR, "Issuer", "$avp(JWTKeys)") != 1) {
        xlog("L_DEBUG", "no Issuer keys\n");
    } else {
        $var(Count) = $cnt($avp(JWTKeys));
        $var(Idx) = 0;
        while($var(Idx) < $var(Count)) {
            $var(K) = $(avp(JWTKeys)[$var(Idx)]);
            $var(V) = $(kzR{kz.json,Issuer.$var(K)});
            xlog("L_DEBUG", "set jwt.$var(K) => $var(V)\n");
            $sht(jwt.keys=>$_s(jwt.$var(K))) = $var(V);
            $var(Idx) = $var(Idx) + 1;
        }
        xlog("L_NOTICE", "loaded $var(Count) entries into jtw.keys issuer table\n");
    }

    avp_delete("$avp(JWTKeys)/g");
    if(kazoo_json_keys($kzR, "Identity", "$avp(JWTKeys)") != 1) {
        xlog("L_DEBUG", "no Identity keys\n");
    } else {
        $var(Count) = $cnt($avp(JWTKeys));
        $var(Idx) = 0;
        while($var(Idx) < $var(Count)) {
            $var(K) = $(avp(JWTKeys)[$var(Idx)]);

            avp_delete("$avp(XJWTKeys)/g");
            if(kazoo_json_keys($kzR, "Identity.$var(K)", "$avp(XJWTKeys)") == 1) {
                $var(XCount) = $cnt($avp(XJWTKeys));
                $var(XIdx) = 0;
                while($var(XIdx) < $var(XCount)) {
                    $var(K1) = $(avp(XJWTKeys)[$var(XIdx)]);
                    $var(V) = $(kzR{kz.json,Identity.$var(K).$var(K1)});

                    xlog("L_DEBUG", "set identity.$var(K).$var(K1) => $var(V)\n");
                    $sht(jwt.keys=>$_s(identity.$var(K).$var(K1))) = $var(V);
                    $var(XIdx) = $var(XIdx) + 1;
                }
                xlog("L_NOTICE", "loaded $var(XCount) entries into jtw.keys identity.$var(K) table\n");
            }
            $var(Idx) = $var(Idx) + 1;
        }
        xlog("L_NOTICE", "loaded $var(Count) entries into jtw.keys identity table\n");
    }

}

route[JWT_KEYS_QUERY]
{
    $ki = $uuid(g);
    if($shv(jwt_keys_query) == 1) {
        route(JWT_KEYS_LOAD);
    };
}

route[KZ_AMQP_BINDING_JWT_KEYS]
{
    $var(payload) = $_s({"name": "jwt-keys-reload", "exchange": "jwt.keys", "type": "topic", "queue": "jwt-keys-reload-MY_HOSTNAME", "routing": "jwt.keys.reload", "federate": true });
    kazoo_subscribe("$var(payload)");
}

event_route[kazoo:consumer-event-jwt-keys-reload]
{
    xlog("L_NOTICE", "received jwt keys reload\n");
    $shv(jwt_keys_query) = 1;
}
