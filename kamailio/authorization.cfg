
####### Authentication Interface module ##########
#!ifndef MOD_auth
loadmodule "auth.so"
#!endif


modparam("statistics","variable", "auth:amqp_not_available")
modparam("statistics","variable", "auth:new_tran")
modparam("statistics","variable", "auth:challenge")
modparam("statistics","variable", "auth:amqp_async_error")
modparam("statistics","variable", "auth:amqp_returned")
modparam("statistics","variable", "auth:amqp_timeout")
modparam("statistics","variable", "auth:authn_perm_err")
modparam("statistics","variable", "auth:authn_err")
modparam("statistics","variable", "auth:authn_resp")
modparam("statistics","variable", "auth:authn_unknown")

#!trydef SEND_AUTH_ORIGIN_X_HEADERS 1
#!trydef SEND_AUTH_IN_DIALOG_X_HEADERS 0
#!trydef AUTHORIZATION_QUERY_TIMEOUT_MS 2500

kazoo.send_auth_origin_x_headers = SEND_AUTH_ORIGIN_X_HEADERS descr "send auth origin x-headers"
kazoo.send_auth_in_dialog_x_headers = SEND_AUTH_IN_DIALOG_X_HEADERS descr "send in-dialog auth x-headers"
kazoo.authorization_query_timeout_ms = AUTHORIZATION_QUERY_TIMEOUT_MS descr "timeout waiting for reply from authorization"

flags
  FLAG_REQUIRE_IN_DIALOG_AUTHZ,
  FLAG_REQUEST_AUTHORIZED_BY_KAZOO;

route[AUTHORIZATION]
{
    if (isflagset(FLAG_AUTHORIZED)) {
        return;
    }

    if (isflagset(FLAG_INTERNALLY_SOURCED)) {
        setflag(FLAG_AUTHORIZED);
        return;
    }

    if (src_ip == myself) {
        setflag(FLAG_AUTHORIZED);
        return;
    }

    if (!is_method("INVITE|REFER|MESSAGE|NOTIFY|SUBSCRIBE|PUBLISH")) {
        setflag(FLAG_AUTHORIZED);
        return;
    }

    #!ifdef KZ_DISABLE_IN_DIALOG_AUTHZ
    if (has_totag() && !isflagset(FLAG_REQUIRE_IN_DIALOG_AUTHZ)) {
        setflag(FLAG_AUTHORIZED);
        return;
    }
    #!endif

    route(AUTHORIZATION_CHECK);

    if (!isflagset(FLAG_AUTHORIZED)) {
        xlog("L_INFO", "challenging $rm from $Au ($avp(auth-uri)) $si:$sp\n");
        $var(auth) = auth_challenge("$avp(auth-domain)", "4");
        update_stat("auth:challenge", "+1");
        if($var(auth) != 1) {
            xlog("L_ERROR", "end - error creating or sending challenge to $rm attempt for $fu from $si:$sp\n");
            send_reply("403", "Forbidden");
        }
        exit;
    }

}

route[AUTHORIZATION_CHECK]
{
    route(KZ_AUTHORIZATION_SETUP);
    routes(AUTHORIZATION_CHECK);

    if (isflagset(FLAG_REGISTERED_ENDPOINT)) {
        route(AUTHORIZATION_SET_AUTHZ);
    }
}

route[AUTHORIZATION_CHECK_TRUSTED]
{
    if (isflagset(FLAG_AUTHORIZED)) return;

    if (isflagset(FLAG_TRUSTED_SOURCE)) {
        route(SETUP_AUTH_ORIGIN);
        route(SETUP_AUTH_TRUSTED);
        setflag(FLAG_AUTHORIZED);
    }
}

route[AUTHORIZATION_SET_AUTHZ]
{
    $xavp(authz=>token) = $xavp(ulattrs=>token);
    $xavp(authz[0]=>endpoint_id) = $(xavp(ulattrs=>token){re.subst,/(.*)@(.*)/\1/});
    $xavp(authz[0]=>account_id) = $(xavp(ulattrs=>token){re.subst,/(.*)@(.*)/\2/});
}

route[HANDLE_AUTHORIZATION_KAZOO]
{
    $var(amqp_payload_request) = $_s({"Event-Category" : "directory" , "Event-Name" : "authn_req", "Method" : "$avp(auth-method)", "Auth-Nonce" : "$adn", "Auth-Realm" : "$avp(auth-domain)", "Auth-User" : "$avp(auth-user)", "From" : "$fu", "To" : "$tu", "Orig-IP" : "$si", "Orig-Port" : "$sp", "User-Agent" : "$avp(auth-ua)", "Contact" : "$avp(auth-contact)", "Call-ID" : "$ci" });
    $var(amqp_routing_key) = $_s($def(REGISTRAR_AMQP_RK_PREFIX)$(avp(auth-domain){kz.encode}));
    $avp(kz_timeout) = $sel(cfg_get.kazoo.authorization_query_timeout_ms);
    $xavp(deltas=>query) = $(TV(Sn){s.replace,.,});

    xlog("L_DEBUG", "publishing to $def(REGISTRAR_AMQP_EXCHANGE) => $var(amqp_routing_key) : $def(REGISTRAR_AMQP_FLAGS) : $var(amqp_payload_request)\n");
    if(kazoo_async_query("$def(REGISTRAR_AMQP_EXCHANGE)", $var(amqp_routing_key), $var(amqp_payload_request), "KZ_AUTHORIZATION_CHECK_REPLY", "KZ_AUTHORIZATION_CHECK_TIMEOUT", "$def(REGISTRAR_AMQP_FLAGS)") != 1) {
        xlog("L_INFO", "failed to send registrar query for authentication credentials for $Au $si:$sp\n");
        update_stat("auth:amqp_async_error", "+1");
        send_reply("403", "Forbidden");
        exit;
    }
}

failure_route[KZ_AUTHORIZATION_CHECK_TIMEOUT]
{
    if($(kzR{kz.json,Event-Name}) == "message_returned" ) {
        xlog("L_WARNING", "message was returned by broker $(kzR{kz.json,Error-Code}) $(kzR{kz.json,Error-Reason})\n");
        update_stat("auth:amqp_returned", "+1");
    } else {
        xlog("L_WARNING", "end - failed $T_reply_code $T_reply_reason [$T(id_index):$T(id_label)] querying directory for authentication credentials for $Au $si:$sp\n");
        update_stat("auth:amqp_timeout", "+1");
    }
    t_reply("403", "Forbidden");
    exit;
}

onreply_route[KZ_AUTHORIZATION_CHECK_REPLY]
{
    $var(StartRoute) = $(TV(Sn){s.replace,.,});
    $var(delta_to_start) = $var(StartRoute) - $(kzR{kz.json,AMQP-Received});
    $var(delta_from_query) = $(kzR{kz.json,AMQP-Received}) - $xavp(deltas=>query);
    xlog("L_INFO", "received $(kzR{kz.json,Event-Category}) $(kzR{kz.json,Event-Name}) reply from $(kzR{kz.json,App-Name})-$(kzR{kz.json,App-Version}) (Δ1 $(kzR{kz.json,AMQP-Elapsed-Micro}) μs , Δ2 $var(delta_to_start) μs, Δ3 $var(delta_from_query) μs)\n");
    $vn(password) = $(kzR{kz.json,Auth-Password});
    if( $(kzR{kz.json,Event-Name}) == "authn_err" ) {
        update_stat("auth:authn_err", "+1");
        t_reply("403", "Forbidden");
        exit;
    } else if( $(kzR{kz.json,Event-Name}) == "authn_resp" ) {
        update_stat("auth:authn_resp", "+1");
        route(KZ_AUTHORIZATION_CHECK_RESPONSE);
    } else {
        update_stat("auth:authn_unknown", "+1");
        xlog("L_INFO", "unhandled response from directory $Au via $(kzR{kz.json,App-Name})-$(kzR{kz.json,App-Version})\n");
        t_reply("403", "Forbidden");
        exit;
    }
}

route[KZ_AUTHORIZATION_CHECK_RESPONSE]
{
    $var(retcode) = pv_auth_check("$avp(auth-domain)", "$vn(password)", "0", "0");
    if ($var(retcode) != 1) {
        xlog("L_WARNING", "end - auth failed $var(retcode)\n");
        routes(KZ_AUTHORIZATION_FAILED_AUTH);
        switch($var(retcode)) {
            case -4:
            case -5:
            case -6:
                xlog("L_INFO", "end - auth check failed due to nonce or missing creds, challenging\n");
                auth_challenge("$avp(auth-domain)", "1");
                exit;
                break;
            default:
                send_reply("403", "Forbidden");
                exit;
        }
    }

    xlog("L_INFO", "$(rm{s.tolower}) was authorized by kazoo via amqp\n");
    setflag(FLAG_REQUEST_AUTHORIZED_BY_KAZOO);

    consume_credentials();

    $xavp(authz=>token) = $_s($(kzR{kz.json,Custom-Channel-Vars.Authorizing-ID})@$(kzR{kz.json,Custom-Channel-Vars.Account-ID}));
    $xavp(authz[0]=>endpoint_id) = $(kzR{kz.json,Custom-Channel-Vars.Authorizing-ID});
    $xavp(authz[0]=>account_id) = $(kzR{kz.json,Custom-Channel-Vars.Account-ID});

    route(SETUP_AUTH_ORIGIN);
    $xavp(hf[0]=>X-AUTH-Token) = $xavp(authz=>token);

    setflag(FLAG_AUTHORIZED);
    # treat req as if it was from a reg'd endpoint despite absent location record
    setflag(FLAG_REGISTERED_ENDPOINT);

    # flag that contact alias needs to be added for subscribe
    setflag(FLAG_MANUAL_ALIAS);

    # reset tm handlers
    t_on_failure(0);
    t_on_reply(0);

    # signal custom handlers of success
    routes(KZ_AUTHORIZATION_SUCCESS);

    route(MAIN);
    exit;
}

route[HANDLE_AUTHORIZATION]
{

    if (isflagset(FLAG_INTERNALLY_SOURCED)) {
        route(MAIN);
        exit;
    }

    if(!is_present_hf("Proxy-Authorization")) {
        route(MAIN);
        exit;
    }

    if (!is_method("INVITE|REFER|MESSAGE|NOTIFY|SUBSCRIBE|PUBLISH")) {
        consume_credentials();
        route(MAIN);
        exit;
    }

    #!ifdef KZ_DISABLE_IN_DIALOG_AUTHZ
    if (has_totag()) {
        consume_credentials();
        route(MAIN);
        exit;
    }
    #!endif

    # check before sending to amqp
    # some UA's send creds on re-registration and/or re-subscribe
    route(AUTHORIZATION_CHECK);
    if (isflagset(FLAG_AUTHORIZED)) {
        consume_credentials();
        route(MAIN);
        exit;
    }

    routes(HANDLE_AUTHORIZATION);

}

route[CORE_INIT_ROUTE_AUTH_SETUP]
{
    xavp_rm("hf");
}

route[SETUP_AUTH_ORIGIN]
{
    xavp_rm("hf");
    if ($sel(cfg_get.kazoo.send_auth_origin_x_headers) == 1) {
        $xavp(hf=>X-AUTH-IP) = $si;
        $xavp(hf[0]=>X-AUTH-PORT) = $sp;
    }
}

route[SETUP_AUTH_TRUSTED]
{
    if (isflagset(FLAG_TRUSTED_SOURCE)) {
        $xavp(hf[0]=>X-AUTH-Token) = $avp(trusted_x_header);
        $xavp(hf[0]=>X-AUTH-URI-User) = $rU;
        $xavp(hf[0]=>X-AUTH-URI-Realm) = $rd;
        if(is_present_hf("P-Asserted-Identity") && $(ai{uri.user}) != "") {
            $xavp(hf[0]=>X-AUTH-From-User) = $(ai{uri.user});
        } else if(is_present_hf("P-Preferred-Identity") && $pU != "") {
            $xavp(hf[0]=>X-AUTH-From-User) = $pU;
        } else if(is_present_hf("Remote-Party-ID") && $(re{uri.user}) != "") {
            $xavp(hf[0]=>X-AUTH-From-User) = $(re{uri.user});
        } else {
            $xavp(hf[0]=>X-AUTH-From-User) = $fU;
        }
        if($xavp(hf=>X-AUTH-From-User) =~ "^\+?00+$") {
            $xavp(hf[0]=>X-AUTH-From-Is-Anonymous) = "true";
            $xavp(hf[0]=>X-AUTH-From-User) = $null;
        } else if($(xavp(hf=>X-AUTH-From-User){s.tolower}) =~ "^anonymous$") {
            $xavp(hf[0]=>X-AUTH-From-Is-Anonymous) = "true";
            $xavp(hf[0]=>X-AUTH-From-User) = $null;
        }
        setflag(FLAG_AUTHORIZED);
    }
}

route[JSON_AUTH_HEADERS]
{

    routes(AUTH_HEADERS);

    xavp_params_implode("hf", "$var(outx)");
    $var(out) = $(var(outx){re.subst,/^(.*);$$/\1/});
    $var(c) = $(var(out){param.count});
    $var(headers_json) = "";
    $var(sep) = "";
    xlog("L_DEBUG", "headers $var(c) => $var(out) => $var(outx)\n");
    while($var(c) > 0) {
        $var(idx) = $var(c) - 1;
        xlog("L_DEBUG", "adding $(var(out){param.name,$var(idx)}): $(var(out){param.valueat,$var(idx)}{s.unescape.param})\n");
        $var(headers_json) = $_s($var(headers_json)$var(sep)"$(var(out){param.name,$var(idx)})" : "$(var(out){param.valueat,$var(idx)}{s.unescape.param})");
        $var(c) = $var(c) - 1;
        $var(sep) = " , ";
    }
    $var(headers_json) = $_s({ $var(headers_json) });
}

route[AUTH_HEADERS]
{
    route(REMOVE_RESERVED_HEADERS);

    if (!is_method("INVITE|MESSAGE|REFER")) {
            return;
    }

    if (has_totag() && $sel(cfg_get.kazoo.send_auth_in_dialog_x_headers) == 0) {
        return;
    }

    routes(AUTH_HEADERS);

    xavp_params_implode("hf", "$var(outx)");
    $var(out) = $(var(outx){re.subst,/^(.*);$$/\1/});
    $var(c) = $(var(out){param.count});
    xlog("L_DEBUG", "headers $var(c) => $var(out) => $var(outx)\n");
    while($var(c) > 0) {
        $var(idx) = $var(c) - 1;
        xlog("L_DEBUG", "adding $(var(out){param.name,$var(idx)}): $(var(out){param.valueat,$var(idx)}{s.unescape.param})\n");
        append_hf("$(var(out){param.name,$var(idx)}): $(var(out){param.valueat,$var(idx)}{s.unescape.param})\r\n");
        $var(c) = $var(c) - 1;
    }

}

route[KZ_AUTHORIZATION_SETUP]
{
    # method
    $avp(auth-method) = "REGISTER";

    # auth user
    # removes params
    $avp(auth-user) = $(fU{s.before,;});

    # auth scheme
    $avp(auth-scheme) = $(fu{uri.scheme});

    # Realm
    # removes params and port
    $avp(auth-domain) = $(fd{s.before,;}{s.before,:});

    # with proxy-auth
    if(is_present_hf("Proxy-Authorization")) {
        $avp(auth-user) = $au;
        $avp(auth-domain) = $(ar{s.before,;}{s.before,:});
    }

    # Contact
    if ($ct != $null) {
        $avp(auth-contact) = $(ct{s.escape.common}{s.replace,\','}{s.replace,$$,});
    }

    # User-Agent
    $avp(auth-ua) = "unknown";
    if ($ua != $null) {
        $avp(auth-ua) = $(ua{s.escape.common}{s.replace,\','}{s.replace,$$,});
    }

    routes(KZ_AUTHORIZATION_SETUP);

    $avp(auth-uri) = $_s($avp(auth-scheme):$avp(auth-user)@$avp(auth-domain));
}

#!ifndef KZ_DISABLE_CONTACT_METHODS_REMOVAL
route[KZ_AUTHORIZATION_SETUP_RM_CONTACT_METHODS]
{
    ## remove "methods" from params, polycom/snom specific
    if ($(ct{tobody.params}) =~ "methods") {
        $var(auth_setup_contact) = $_s($(ct{tobody.params}{re.subst,/(methods="[^"]*")//}{re.subst,/;;/;/}{re.subst,/;$$//}{re.subst,/^;//}));
        if ($(var(auth_setup_contact){s.len}) > 2) {
            $avp(auth-contact) = $_s(<$(ct{tobody.uri})>;$(var(auth_setup_contact){s.escape.common}{s.replace,\','}{s.replace,$$,}));
        } else {
            $avp(auth-contact) = $_s(<$(ct{tobody.uri})>);
        }
    }
}
#!endif
