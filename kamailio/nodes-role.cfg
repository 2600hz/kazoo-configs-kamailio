######## Nodes role - pushes info to kazoo ########

#!trydef NODES_FUDGE_EXPIRE 45
#!trydef NODES_TRACK_DISCONNECTED 90
#!trydef NODES_TRACK_TIMER 10
#!trydef NODES_CONSUMER_TIMER 5
#!trydef NODES_CONSUMER_PROCS 2
#!trydef NODES_PUBLISHER_TIMER 10
#!trydef NODES_PUBLISHER_EXPIRE_MS 15000

#!trydef NODES_EXPIRES_MEDIA_SERVERS 0
#!trydef KZ_NODE_TAGS

kazoo.nodes_expire_media_servers = NODES_EXPIRES_MEDIA_SERVERS descr "expire media servers, used for frequent topology changes"


modparam("htable", "htable", "nodes=>size=8;autoexpire=60");
modparam("htable", "htable", "media=>size=8;autoexpire=60");

modparamx("rtimer", "timer", "name=ta;interval=$def(NODES_CONSUMER_TIMER);mode=$def(NODES_CONSUMER_PROCS);")
modparamx("rtimer", "timer", "name=retry;interval=$def(NODES_TRACK_TIMER);mode=1;")
modparamx("rtimer", "timer", "name=pub;interval=$def(NODES_PUBLISHER_TIMER);mode=1;")
modparam("rtimer", "exec", "timer=ta;route=NODE_HEARTBEAT_ROUTE")
modparam("rtimer", "exec", "timer=retry;route=NODE_TRACK_ROUTE")
modparam("rtimer", "exec", "timer=pub;route=NODES_ADVERTISE_ROUTE")


modparam("mqueue","mqueue", "name=node_track")
modparam("mqueue","mqueue", "name=node_heartbeat")


####### NODES Logic ########

route[NODES_BUILD_ROLES]
{

   if ($shv(kz_listener_status) == $null || $shv(kz_listener_status) == 0) {
      route(LISTENER_STATUS);
      $shv(kz_listener_status) = $var(listeners);
   } else {
      $var(listeners) = $shv(kz_listener_status);
   }

#!ifdef DISPATCHER_ROLE
    route(DISPATCHER_STATUS);
    $var(Dispatcher) = $_s(, "Dispatcher" : {"Groups" : { $var(ds_groups_json) }});
#!else
    $var(Dispatcher) = "";
#!endif

#!ifdef PRESENCE_ROLE
    route(COUNT_ALL_SUBSCRIBERS);
    $var(Subscriptions) = $_s("Subscriptions" : { $var(Subscriptions) });
    $var(Subscribers) = $_s("Subscribers" : { $var(Subscribers) });

    route(COUNT_ALL_PRESENTITIES);
    $var(Presentities) = $_s("Presentities" : {"message-summary" : $xavp(watchers=>message-summary), "dialog" : $xavp(watchers=>dialog), "presence" : $xavp(watchers=>presence)});

    $var(Presence) = $_s(, "Presence" : {$var(Subscribers), $var(Subscriptions), $var(Presentities)});
#!else
    $var(Presence) = "";
#!endif

#!ifdef REGISTRAR_ROLE
    $var(Registrar) = $_s(, "Registrar" : {"Registrations" : $(stat(registered_users){s.int})});
#!else
    $var(Registrar) = "";
#!endif

}

route[NODES_ADVERTISE_ROUTE]
{
   route(NODES_BUILD_ROLES);

   $var(Roles) = $_s("Roles" : {"Proxy" : $var(listeners) $var(Dispatcher) $var(Presence) $var(Registrar)});
   $var(Runtime) = $_s({"Core-UUID" : "$shv(kz_proxy_core_uuid)", "tags" : [$shv(kz_proxy_tags)]});
   $var(Payload) = $_s({"Event-Category" : "nodes", "Event-Name" : "advertise", "Expires" : $def(NODES_PUBLISHER_EXPIRE_MS), "Used-Memory" : $(stat(real_used_size){s.int}), "Startup" : $Tb, "WhApps" : {"kamailio" : {"Startup" : $Tb }},  $var(Roles), "Runtime-Info" : $var(Runtime) });
   kazoo_publish("nodes", "$knode", $var(Payload));
}

event_route[kazoo:consumer-event-nodes-advertise]
{
   if ($sht(nodes=>$(kzE{kz.json,Node})::track) != $null) {
      xlog("L_NOTICE", "heartbeat for reconnected node $(kzE{kz.json,Node})\n");
      $sht(nodes=>$(kzE{kz.json,Node})::track) = $null;
   } else {
      if ($sht(nodes=>$(kzE{kz.json,Node})) == $null) {
         xlog("L_NOTICE", "heartbeat from new node $(kzE{kz.json,Node})\n");
      } else {
         xlog("L_DEBUG", "heartbeat from existing node $(kzE{kz.json,Node})\n");
      }
   }
   mq_add("node_heartbeat", "$(kzE{kz.json,Node})", "$kzE");
}

event_route[htable:expired:nodes]
{
   if ($shtrecord(key) =~ "::track$$") {
      $ki = "track";
      if($TS - $(shtrecord(value){s.int}) < NODES_TRACK_DISCONNECTED) {
         xlog("L_WARNING", "node $(shtrecord(key){s.rm,::track}) is still unreachable\n");
         mq_add("node_track", "$shtrecord(key)", "$shtrecord(value)");
      } else {
         xlog("L_WARNING", "node $(shtrecord(key){s.rm,::track}) is lost\n");
      }
   } else {
      xlog("L_WARNING", "heartbeat expired for node $shtrecord(key)\n");
      mq_add("node_track", "$shtrecord(key)::track", "$TS");
   }
}

route[NODE_TRACK_ROUTE]
{
   $var(runloop) = 1;
   while(mq_fetch("node_track") == 1 && $var(runloop) < MAX_WHILE_LOOPS) {
      $var(Key) = $mqk(node_track);
      $var(Value) = $mqv(node_track);
      $sht(nodes=>$var(Key)) = $var(Value);
      $shtex(nodes=>$var(Key)) = 30;

      $var(runloop) = $var(runloop) + 1;
   }
}


route[NODE_HEARTBEAT_ROUTE]
{
  $var(runloop) = 1;
  while(mq_fetch("node_heartbeat") == 1 && $var(runloop) < MAX_WHILE_LOOPS) {
      $var(Node) = $mqk(node_heartbeat);
      $var(Payload) = $mqv(node_heartbeat);
      $ki = $(var(Payload){kz.json,Msg-ID});
      $var(Zone) = $(var(Payload){kz.json,AMQP-Broker-Zone});
      $var(node_cache) = 0;
      xlog("L_DEBUG", "processing heartbeat for node $var(Node)\n");

      routes(NODE_HEARTBEAT_CHECK);

      # cache payloads is only interesting for htable dump
      # and for nodes we care about
      if ($var(node_cache) == 1) {
         $sht(nodes=>$var(Node)) = $var(Payload);
      } else {
         $sht(nodes=>$var(Node)) = 0;
      }
      $shtex(nodes=>$var(Node)) = ($(var(Payload){kz.json,Expires}{s.int}) / 1000) + NODES_FUDGE_EXPIRE;

      $var(runloop) = $var(runloop) + 1;
  }
}

route[NODE_HEARTBEAT_CHECK_MEDIA_SERVERS]
{
   if($(var(Payload){kz.json,Media-Servers}) == "") {
      return;
   }

   $var(node_cache) = 1;
   $var(Media) = $(var(Payload){kz.json,Media-Servers});

   $var(Dot) = ".";
   $var(Perc) = "%";
   avp_delete("$avp(MediaKeys)/g");
   if(kazoo_json_keys($var(Payload), "Media-Servers", "$avp(MediaKeys)") == 1) {
       $var(Count) = $cnt($avp(MediaKeys));
       $var(Idx) = 0;
       while( $var(Idx) < $var(Count) ) {
         $var(MediaName) = $(avp(MediaKeys)[$var(Idx)]);
         $var(MediaKey) = $(var(MediaName){s.replace,$var(Dot),$var(Perc)});
         avp_delete("$avp(ProfileKeys)/g");

         $var(MediaReconnected) = 0;
         $var(MediaConnected) = $(var(Payload){kz.json,Media-Servers.$var(MediaKey).Startup});
         $var(ExistingMediaConnected) = $sht(media=>$var(MediaKey)::connected::$var(Node));
         xlog("L_DEBUG", "$var(MediaKey) from $var(Node) => $var(MediaConnected) vs $var(ExistingMediaConnected)\n");
         if($var(ExistingMediaConnected) != $null && $var(MediaConnected) > $var(ExistingMediaConnected)) {
            $var(MediaReconnected) = 1;
         }
         $sht(media=>$var(MediaKey)::connected::$var(Node)) = $var(MediaConnected);
         $shtex(media=>$var(MediaKey)::connected::$var(Node)) = 0;

         if(kazoo_json_keys($var(Payload), "Media-Servers.$var(MediaKey).Interfaces", "$avp(ProfileKeys)") == 1) {
            $var(ProfileCount) = $cnt($avp(ProfileKeys));
            $var(ProfileIdx) = 0;
            while( $var(ProfileIdx) < $var(ProfileCount) ) {
                 $var(MediaProfile) = $(avp(ProfileKeys)[$var(ProfileIdx)]);
                 $var(MediaRawUrl) = $(var(Payload){kz.json,Media-Servers.$var(MediaKey).Interfaces.$var(MediaProfile).info.url});
                 if($var(MediaRawUrl) == "") {
                     $var(MediaRawUrl) = $(var(Payload){kz.json,Media-Servers.$var(MediaKey).Interfaces.$var(MediaProfile).URL});
                 }
                 $var(MediaUrl) =  $(var(MediaRawUrl){re.subst,/^sip:(.*)@(.*)/sip:\2/});
                 $var(MediaInstanceUUID) = $(var(Payload){kz.json,Media-Servers.$var(MediaKey).Instance-UUID});
                 $var(MediaIP) = $(var(Payload){kz.json,Media-Servers.$var(MediaKey).Interfaces.$var(MediaProfile).info.sip-ip});
                 if($var(MediaIP) == "") {
                     $var(MediaIP) = $(var(Payload){kz.json,Media-Servers.$var(MediaKey).Interfaces.$var(MediaProfile).SIP-IP});
                 }
                 if($sht(media=>$var(MediaUrl)::uuid) == $null) {
                     $sht(media=>$var(MediaUrl)::zone) = $var(Zone);
                     $shtex(media=>$var(MediaUrl)::zone) = 0;
                     $sht(media=>$var(MediaUrl)::uuid) = $var(MediaInstanceUUID);
                     $shtex(media=>$var(MediaUrl)::uuid) = 0;
                     $sht(media=>$var(MediaInstanceUUID)) = $var(MediaUrl);
                     $shtex(media=>$var(MediaInstanceUUID)) = 0;
                     route(MEDIA_SERVER_UP);
                 } else if($sht(media=>$var(MediaUrl)::uuid) != $var(MediaInstanceUUID)) {
                     $sht(media=>$var(MediaUrl)::uuid) = $var(MediaInstanceUUID);
                     $shtex(media=>$var(MediaUrl)::uuid) = 0;
                     $sht(media=>$var(MediaInstanceUUID)) = $var(MediaUrl);
                     $shtex(media=>$var(MediaInstanceUUID)) = 0;
                     $var(Zone) = $sht(media=>$var(MediaUrl)::zone);
                     route(MEDIA_SERVER_RESTART);
                 } else if($var(MediaReconnected) == 1) {
                     route(MEDIA_SERVER_RECONNECTED);
                 };
                 $var(MediaExpire) = ($(var(Payload){kz.json,Expires}{s.int}) / 1000) + NODES_FUDGE_EXPIRE;
                 xlog("L_DEBUG", "$var(Node) media expiration $var(MediaExpire) for $var(MediaUrl)\n");
                 $sht(media=>$var(MediaUrl)::expire) = $var(MediaExpire);
                 if ($sel(cfg_get.kazoo.nodes_expire_media_servers) == 1) {
                     $shtex(media=>$var(MediaUrl)::expire) = $var(MediaExpire);
                 }
                 $var(ProfileIdx) = $var(ProfileIdx) + 1;
            }
         }
         $var(Idx) = $var(Idx) + 1;
       }
   };
}

event_route[htable:expired:media]
{
   $var(MediaUrl) = $(shtrecord(key){re.subst,/(.*)::(.*)/\1/});
   $var(Zone) = $sht(media=>$var(MediaUrl)::zone);
   $var(CoreUUID) = $sht(media=>$var(MediaUrl)::uuid);
   $ki = $var(CoreUUID);
   route(MEDIA_SERVER_DOWN);
   $sht(media=>$var(CoreUUID)) = $null;
   $sht(media=>$var(MediaUrl)::uuid) = $null;
   $sht(media=>$var(MediaUrl)::zone) = $null;
}

route[MEDIA_SERVER_UP]
{
   xlog("L_NOTICE", "$var(Node) reported new media server $var(MediaUrl) in zone $var(Zone)\n");
   routes(MEDIA_SERVER_UP);
}

route[MEDIA_SERVER_DOWN]
{
   xlog("L_WARNING", "heartbeat expired for media server $var(MediaUrl) in zone $var(Zone)\n");
   routes(MEDIA_SERVER_DOWN);
}

route[MEDIA_SERVER_RESTART]
{
   xlog("L_NOTICE", "media server $var(MediaUrl) restarted in zone $var(Zone)\n");
   routes(MEDIA_SERVER_RESTART);
}

route[MEDIA_SERVER_RECONNECTED]
{
   xlog("L_NOTICE", "media server $var(MediaUrl) reconnected to $var(Node) in zone $var(Zone)\n");
   routes(MEDIA_SERVER_RECONNECTED);
}

route[KZ_AMQP_BINDING_NODES]
{
   $shv(kz_proxy_core_uuid) = $uuid(g);

   # proxy tags
   $var(proxy_tags) = $(def(KZ_NODE_TAGS){s.trim}{s.unquote});
   if ($(var(proxy_tags){s.len}) > 0) {
      $var(tmp_proxy_tags) = "";
      $var(sep_proxy_tags) = "";
      $var(proxy_tag_count) = $(var(proxy_tags){s.count,,}) + 1;

      $var(idx) = 0;
      while ($var(idx) < $var(proxy_tag_count)) {
         $var(proxy_tag) = $(var(proxy_tags){s.select,$var(idx),,});
         $var(tmp_proxy_tags) = $_s($var(tmp_proxy_tags)$var(sep_proxy_tags)"$var(proxy_tag)");
         $var(idx) = $var(idx) + 1;
         $var(sep_proxy_tags) = ",";
      }
      $var(proxy_tags) = $var(tmp_proxy_tags);
   }
   $shv(kz_proxy_tags) = $var(proxy_tags);
   xlog("L_INFO", "proxy tags [$shv(kz_proxy_tags)]\n");

   $var(payload) = $_s({"name": "nodes", "exchange" : "nodes" , "type" : "fanout", "queue" : "nodes-MY_HOSTNAME", "exclusive": false, "federate": true });
   kazoo_subscribe("$var(payload)");
}

route[LISTENER_STATUS]
{
   jsonrpc_exec('{"jsonrpc": "2.0", "method": "corex.list_sockets", "id": 1}');
   $var(count) = $(jsonrpl(body){kz.json.count,result});
   $var(loop) = 0;
   $var(sep) = "";
   $var(listeners) = "";
   while( $var(loop) < $var(count) ) {
      $var(listener) = $(jsonrpl(body){kz.json,result[$var(loop)]});
      $var(proto) = $(var(listener){kz.json,PROTO});
      $var(address) = $(var(listener){kz.json,ADDRLIST.ADDR});
      $var(port) = $(var(listener){kz.json,PORT});
      $var(portn) = $(var(port){s.int});
      if ($var(address) != "127.0.0.1" && $var(portn) != PROMETHEUS_PORT) {
         if ($var(portn) == WS_PORT || $var(portn) == WS_EXTERNAL_PORT || $var(portn) == WS_LB_PORT) {
            ## websocket
            $var(proto) = "ws";
         } else if ($var(portn) == WSS_PORT || $var(portn) == WSS_EXTERNAL_PORT || $var(portn) == WSS_LB_PORT) {
             ## websocket secure
            $var(proto) = "wss";
         }
         $var(uri) = $_s($var(proto):$var(address):$var(port));
         if($(var(listener){kz.json,ADVERTISE}) != "-") {
            $var(advertise) = $_s( , "advertise" : "$(var(listener){kz.json,ADVERTISE})");
         } else {
            $var(advertise) = "";
         }
         $var(x) = $_s("$var(uri)" : {"proto" : "$var(proto)", "address" : "$var(address)", "port" : $var(port) $var(advertise) });
         $var(listeners) = $_s($var(listeners)$var(sep)$var(x));
         $var(sep) = " , ";
      }
      $var(loop) = $var(loop) + 1;
   }

   #!ifdef WITH_INTERNAL_LISTENER
   $var(default_proxy) = $_s(, "proxy-default-uri" : "sip:MY_IP_ADDRESS:$def(INTERNAL_PORT);transport=$def(INTERNAL_PROTO)");
   #!else
   $var(default_proxy) = "";
   #!endif

   $var(listeners) = $_s({"Listeners" : { $var(listeners) } $var(default_proxy)});
}

# vim: tabstop=4 softtabstop=4 shiftwidth=4 expandtab
