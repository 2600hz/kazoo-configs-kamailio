######## kazoo bindings ########
### use this simple form of binding a listener
### kazoo_subscribe("dialoginfo", "direct", "BLF-QUEUE-MY_HOSTNAME", "BLF-MY_HOSTNAME");
###
### or unleash the power of rabbit to kazoo-blf
###
### 'no_ack' : 1 => needs ack,
### 'wait_for_consumer_ack'
###    : 1 => when it receives, it processses on the AMQP Worker ad after that it confirms
###    : 0 => when it receives, it acks then processes in the AMQP Worker
###    only works if no_ack : 0
###
### Rabbit Policy for ha-mode
###  pattern : ^BLF
###  definition : ha-mode: all
###
###

event_route[kazoo:mod-init]
{

    #!ifdef PRESENCE_ROLE
    route(PRESENCE_BINDINGS);
    #!endif

    #!ifdef MESSAGE_ROLE
    route(MESSAGE_BINDINGS);
    #!endif

    #!ifdef REGISTRAR_ROLE
    route(REGISTRAR_BINDINGS);
    #!endif

    #!ifdef NODES_ROLE
    route(NODES_BINDINGS);
    #!endif

    #!ifdef ACL_ROLE
    route(ACL_BINDINGS);
    #!endif

    #!import_file  "kazoo-custom-bindings.cfg"

}

event_route[kazoo:consumer-event]
{
    xlog("L_DEBUG","unhandled AMQP event, payload: $kzE\n");
}

event_route[kazoo:consumer-event-connection-open]
{
    xlog("L_DEBUG","connection to $(kzE{kz.json,host}) opened\n");
}

event_route[kazoo:consumer-event-connection-error]
{
    xlog("L_ERR","amqp|error|$(kzE{kz.json,zone})|$(kzE{kz.json,name})|$(kzE{kz.json,message})\n");
}

event_route[kazoo:consumer-event-connection-message]
{
    xlog("L_DEBUG","amqp|msg|$(kzE{kz.json,zone})|$(kzE{kz.json,name})|$(kzE{kz.json,message})\n");
}

event_route[kazoo:consumer-event-connection-closed]
{
    xlog("L_DEBUG","amqp|closed|$(kzE{kz.json,zone})|$(kzE{kz.json,name})|connection to $(kzE{kz.json,host}) closed\n");
}

event_route[kazoo:consumer-event-connection-zone-available]
{
    xlog("L_DEBUG","amqp zone $(kzE{kz.json,zone}) is available\n");
}

event_route[kazoo:consumer-event-connection-zone-unavailable]
{
    xlog("L_DEBUG","amqp zone $(kzE{kz.json,zone}) is unavailable\n");
}

event_route[kazoo:consumer-event-connection-available]
{
    xlog("L_DEBUG","amqp zone $(kzE{kz.json,zone}) is available\n");
}

event_route[kazoo:consumer-event-connection-unavailable]
{
    xlog("L_DEBUG","amqp zone $(kzE{kz.json,zone}) is unavailable\n");
}

event_route[kazoo:consumer-event-connection-zone-listener-available]
{
    xlog("L_DEBUG","amqp zone $(kzE{kz.json,zone}) is available\n");
}

event_route[kazoo:consumer-event-connection-zone-listener-unavailable]
{
    xlog("L_DEBUG","amqp zone $(kzE{kz.json,zone}) is unavailable\n");
}

event_route[kazoo:consumer-event-connection-listener-zone-available]
{
    xlog("L_NOTICE","amqp|connection|$(kzE{kz.json,zone})|$(kzE{kz.json,name})|listener available\n");   
}

event_route[kazoo:consumer-event-connection-listener-zone-unavailable]
{
    xlog("L_WARN","amqp|connection|$(kzE{kz.json,zone})|$(kzE{kz.json,name})|listener unavailable\n");

    #!ifdef PRESENCE_ROLE
    route(PRESENCE_ZONE_UNAVAILABLE);
    #!endif
}

event_route[kazoo:consumer-event-connection-listener-available]
{
    xlog("L_DEBUG","amqp|connection|$(kzE{kz.json,zone})|$(kzE{kz.json,name})|listener available\n");
}

event_route[kazoo:consumer-event-connection-listener-unavailable]
{
    xlog("L_DEBUG","amqp zone $(kzE{kz.json,zone}) is unavailable\n");
}

# vim: tabstop=4 softtabstop=4 shiftwidth=4 expandtab
