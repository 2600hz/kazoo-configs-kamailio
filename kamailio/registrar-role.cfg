## registrar role

#!trydef KZ_REGISTRAR_PORT 7000
#!trydef KZ_REGISTRAR_PROTO udp

#!ifndef KZ_DISABLE_WEBSOCKETS_REGISTRAR_PORT
#!trydef KZ_WEBSOCKETS_REGISTRAR_PORT $def(KZ_REGISTRAR_PORT)
#!endif

#!ifndef KZ_DISABLE_TLS_REGISTRAR_PORT
#!trydef KZ_TLS_REGISTRAR_PORT $def(KZ_REGISTRAR_PORT)
#!endif

#!ifndef KZ_DISABLE_TCP_REGISTRAR_PORT
#!trydef KZ_TCP_REGISTRAR_PORT $def(KZ_REGISTRAR_PORT)
#!endif

#!ifndef KZ_DISABLE_WEBSOCKETS_REGISTRAR_PROXY_PROTO
#!trydef KZ_WEBSOCKETS_REGISTRAR_PROXY_PROTO $def(KZ_REGISTRAR_PROTO)
#!endif

#!ifndef KZ_DISABLE_TLS_REGISTRAR_PROXY_PROTO
#!trydef KZ_TLS_REGISTRAR_PROXY_PROTO $def(KZ_REGISTRAR_PROTO)
#!endif

#!ifndef KZ_DISABLE_TCP_REGISTRAR_PROXY_PROTO
#!trydef KZ_TCP_REGISTRAR_PROXY_PROTO $def(KZ_REGISTRAR_PROTO)
#!endif

#!trydef REGISTRAR_MIN_EXPIRES 300
#!trydef REGISTRAR_MAX_EXPIRES 3600
#!trydef REGISTRAR_DEFAULT_EXPIRES 600
#!trydef REGISTRAR_ERROR_MIN_EXPIRES 1
#!trydef REGISTRAR_ERROR_MISSING_EXPIRES 1
#!trydef REGISTRAR_CONTACT_MAX_SIZE 2048

#!trydef REGISTRAR_QUERY_TIMEOUT_MS 2500
#!trydef REGISTRAR_HANDLE_LOST_TCP 1
#!trydef REGISTRAR_CLOSE_EXPIRED_TCP 1
#!trydef REGISTRAR_HANDLE_EXPIRED_TCP 1
#!trydef REGISTRAR_HANDLE_EXPIRED_UDP 1
#!trydef REGISTRAR_HANDLE_EXPIRED_TLS 1
#!trydef REGISTRAR_HANDLE_EXPIRED_WS 1
#!trydef REGISTRAR_FORCE_QUERY 0
#!trydef REGISTRAR_FORCE_FAILOVER 0
#!trydef REGISTRAR_CHECK_AMQP_AVAILABILITY 1
#!trydef REGISTRAR_AMQP_EXCHANGE registrar
#!trydef REGISTRAR_AMQP_FLAGS 2048
#!trydef REGISTRAR_AMQP_RK_PREFIX authn.endpoint.req.
#!trydef REGISTRAR_SEND_100 1
#!trydef REGISTRAR_DB_MODE 2
#!trydef REGISTRAR_DB_TIMER_CLEANUP 0
#!trydef REGISTRAR_DB_REMOVE_EXPIRED_DELAY 0
#!trydef REGISTRAR_SYNC_TIMER_INTERVAL 5
#!trydef REGISTRAR_SYNC_TIMER_PROCS 1
#!trydef KZ_REGISTRAR_KEEP_ALIVE_MODE 6
#!trydef KZ_REGISTRAR_KEEP_ALIVE_INTERVAL 30

#### behaviour settings
# activated by '#!trydef <setting>' in local.cfg
#
# KZ_REGISTRAR_PUBLISH_REG_ONCE
#  when activated will not publish re-registrations
#  apps relying on reg_success messages must adapt
#  to this setting
#
# REGISTRAR_WARM_CACHE
#  will persist the auth_cache to the database on exit
#  and will use the cache on start
#
####

#!ifdef REGISTRAR_WARM_CACHE
#!substdef "!REGISTRAR_S_WARM_CACHE!dbtable=auth_cache;dbmode=1;!g"
#!else
#!substdef "!REGISTRAR_S_WARM_CACHE!!g" 
#!endif

######## Generic Hash Table container in shared memory ########
modparam("htable", "htable", "auth_cache=>size=16;autoexpire=7200;REGISTRAR_S_WARM_CACHE")

####### auth module  ########
#!ifndef MOD_auth
loadmodule "auth.so"
#!endif

####### User Location Implementation module ##########
loadmodule "usrloc.so"
modparam("usrloc", "db_update_as_insert", 0)
modparam("usrloc", "use_domain", 1)
modparam("usrloc", "nat_bflag", FLB_NATB)
modparam("usrloc", "db_url", "KAZOO_DB_URL")

modparam("usrloc", "db_mode", REGISTRAR_DB_MODE)

modparam("usrloc", "db_timer_clean", REGISTRAR_DB_TIMER_CLEANUP)
modparam("usrloc", "handle_lost_tcp", REGISTRAR_HANDLE_LOST_TCP)
modparam("usrloc", "rm_expired_delay", REGISTRAR_DB_REMOVE_EXPIRED_DELAY)

modparam("usrloc", "db_check_update", 1)
modparam("usrloc", "db_ops_ruid", 1)


modparam("usrloc", "xavp_contact", "ulattrs")
modparam("usrloc", "timer_interval", REGISTRAR_SYNC_TIMER_INTERVAL)
modparam("usrloc", "timer_procs", REGISTRAR_SYNC_TIMER_PROCS)

modparam("usrloc", "fetch_rows", 400)
modparam("usrloc", "handle_lost_tcp", REGISTRAR_HANDLE_LOST_TCP)
modparam("usrloc", "close_expired_tcp", REGISTRAR_CLOSE_EXPIRED_TCP)

modparam("usrloc", "ka_mode", KZ_REGISTRAR_KEEP_ALIVE_MODE)
modparam("usrloc", "ka_from", "sip:registrar@MY_HOSTNAME")
modparam("usrloc", "ka_interval", KZ_REGISTRAR_KEEP_ALIVE_INTERVAL)
modparam("usrloc", "ka_flag", FLB_KEEP_ALIVE)

####### SIP Registrar implementation module ##########
loadmodule "registrar.so"
modparam("registrar", "received_avp", "$avp(AVP_RECV_PARAM)")
modparam("registrar", "min_expires", REGISTRAR_MIN_EXPIRES)
modparam("registrar", "max_expires", REGISTRAR_MAX_EXPIRES)
modparam("registrar", "default_expires", REGISTRAR_DEFAULT_EXPIRES)
modparam("registrar", "xavp_cfg", "regcfg")
modparam("registrar", "gruu_enabled", 1)
modparam("registrar", "outbound_mode", 1)
modparam("registrar", "regid_mode", 1)
modparam("registrar", "path_mode", 1)
modparam("registrar", "use_path", 1)
modparam("registrar", "received_param", "")
modparam("registrar", "xavp_rcd", "ulrcd")
modparam("registrar", "contact_max_size", REGISTRAR_CONTACT_MAX_SIZE)

####### NAT ##########
#!ifdef NAT_TRAVERSAL_ROLE
#!ifndef MOD_nathelper
loadmodule "nathelper.so"
#!endif
modparam("nathelper", "natping_interval", 0)
#!endif

## stats ##
modparam("statistics","variable", "registrar:force_failover")
modparam("statistics","variable", "registrar:cached")
modparam("statistics","variable", "registrar:ip_realm")
modparam("statistics","variable", "registrar:new_tran")        
modparam("statistics","variable", "registrar:amqp_not_available")
modparam("statistics","variable", "registrar:challenge")
modparam("statistics","variable", "registrar:amqp_async_error")
modparam("statistics","variable", "registrar:amqp_returned")
modparam("statistics","variable", "registrar:amqp_timeout")
modparam("statistics","variable", "registrar:drops")
modparam("statistics","variable", "registrar:authn_perm_err")
modparam("statistics","variable", "registrar:authn_err")
modparam("statistics","variable", "registrar:authn_resp")
modparam("statistics","variable", "registrar:authn_unknown")
modparam("statistics","variable", "registrar:save_error")
modparam("statistics","variable", "registrar:missing_expires")
modparam("statistics","variable", "registrar:missing_expires_allowed")
modparam("statistics","variable", "registrar:min_expires")
modparam("statistics","variable", "registrar:min_expires_allowed")


##### registrar realtime params #####
kazoo.registrar_error_min_expires = REGISTRAR_ERROR_MIN_EXPIRES descr "send error when UAS sends expires < min-expires"
kazoo.registrar_error_missing_expires = REGISTRAR_ERROR_MISSING_EXPIRES descr "send error when UAS do not send expires header"
kazoo.registrar_handle_expired_tcp = REGISTRAR_HANDLE_EXPIRED_TCP descr "handles expired tcp registrations"
kazoo.registrar_handle_expired_udp = REGISTRAR_HANDLE_EXPIRED_UDP descr "handles expired udp registrations"
kazoo.registrar_handle_expired_tls = REGISTRAR_HANDLE_EXPIRED_TLS descr "handles expired tls registrations"
kazoo.registrar_handle_expired_ws = REGISTRAR_HANDLE_EXPIRED_WS descr "handles expired ws registrations"
kazoo.registrar_query_timeout_ms = REGISTRAR_QUERY_TIMEOUT_MS descr "timeout waiting for reply from registrar"
kazoo.registrar_failover = REGISTRAR_FORCE_FAILOVER descr "force failover if 1"
kazoo.registrar_force_query = REGISTRAR_FORCE_QUERY descr "force query if 1"
kazoo.registrar_check_amqp_availability = REGISTRAR_CHECK_AMQP_AVAILABILITY descr "checks if amqp connection is available before querying registrar"
kazoo.registrar_send_100 = REGISTRAR_SEND_100 descr "should we send 100 reply while doing directory search"

#!include_file "registrar-query.cfg"

####### Registrar Logic ########

route[REGISTRAR_NAT_FLAGS]
{
    if (isflagset(FLT_NATS) || $(def(KZ_REGISTRAR_KEEP_ALIVE_MODE){s.int}) == 1) {
        xlog("L_DEBUG", "fixing contact for nat request\n");
        setbflag(FLB_NATB);
        #!ifdef NAT_TRAVERSAL_ROLE
        fix_nated_register();
        #!endif

        ## KAZOO-1846: Cisco SPA8000 freaks out on options pings
        if (!($ua =~ "Linksys/SPA8000"
             || $ua =~ "SIPp"
             || (af==INET6)
             || ($(xavp(ulattrs=>custom_channel_vars){kz.json,Keep-Alive}) == "false")
            )) {
            xlog("L_DEBUG", "set nat pinging\n");
            setbflag(FLB_KEEP_ALIVE);
        }
    } else {
       $avp(AVP_RECV_PARAM) = $su;
    }
}

route[HANDLE_REGISTER]
{
    if (!is_method("REGISTER"))  return;

    $vn(password) = $null;

    routes(HANDLE_REGISTER);

    if($sel(cfg_get.kazoo.registrar_failover) == 1) {
        xlog("L_INFO", "forcing failover\n");
        update_stat("registrar:force_failover", "+1");
        drop;
    }

    if($sel(cfg_get.kazoo.registrar_force_query) == 0) {
        if($sht(auth_cache=>$Au) == "authn_perm_err") {
            xlog("L_INFO", "end - issuing auth challenge to cached permanent failed registration attempt for $Au from IP $si:$sp\n");
            update_stat("registrar:authn_perm_err", "+1");
            #!ifdef ANTIFLOOD_ROLE
            route(ANITFLOOD_FAILED_AUTH);
            #!endif
            update_stat("registrar:challenge", "+1");
            auth_challenge("$fd", "4");
            exit;
        } else if($sht(auth_cache=>$Au) != $null) {
            $xavp(regcfg=>match_received) = $su;
            if(registered("location", "$rz:$Au", 2, 1) == 1) {
               if($(xavp(ulattrs=>token){s.len}) > 1) {
                  $vn(password) = $sht(auth_cache=>$Au);
                  update_stat("registrar:cached", "+1");
                  route(UPDATE_LOCATION);
                  exit;
               }
            }
        }
    }

    if($td =~ "[0-9]{1,3}\.[0-9]{1,3}.[0-9]{1,3}\.[0-9]{1,3}" ||
       $fd =~ "[0-9]{1,3}\.[0-9]{1,3}.[0-9]{1,3}\.[0-9]{1,3}") {
        xlog("L_INFO", "invalid domain\n");
        update_stat("registrar:ip_realm", "+1");
        drop;
    }

    route(REGISTRAR_BOUNDS);

    if($sel(cfg_get.kazoo.registrar_check_amqp_availability) == 1) {
        if($xavp(amqpc=>default::MY_AMQP_ZONE) == 0) {
            xlog("L_WARNING", "end - no amqp connection available for default worker in zone MY_AMQP_ZONE\n");
            update_stat("registrar:amqp_not_available", "+1");
            drop;
        }
    }

    $var(auth) = pv_auth_check("$fd", "$uuid(g)", "0", "0");
    if($var(auth) != -2) {
        xlog("L_INFO", "end - challenging $Au $si:$sp\n");
        $var(auth) = auth_challenge("$fd", "4");
        update_stat("registrar:challenge", "+1");
        if($var(auth) != 1) {
            xlog("L_ERROR", "error creating or sending challenge to registration attempt for $fu from $si:$sp\n");
            drop;
        }
        exit;
    }

    if (!t_newtran()) {
        xlog("L_ERROR", "failed to create transaction to query for authentication credentials for $Au $si:$sp\n");
        update_stat("registrar:new_tran", "+1");
        drop;
    }

    if($sel(cfg_get.kazoo.registrar_send_100) == 1) {
        sl_send_reply("100", "checking your credentials");
    }

    $var(amqp_payload_request) = $_s({"Event-Category" : "directory" , "Event-Name" : "authn_req", "Method" : "REGISTER", "Auth-Nonce" : "$adn", "Auth-Realm" : "$fd", "Auth-User" : "$fU", "From" : "$fu", "To" : "$tu", "Orig-IP" : "$si", "Orig-Port" : "$sp", "User-Agent" : "$(ua{s.escape.common}{s.replace,\','}{s.replace,$$,})", "Contact" : "$(ct{s.escape.common}{s.replace,\','}{s.replace,$$,})", "Call-ID" : "$ci" });
    $var(amqp_routing_key) = $_s($def(REGISTRAR_AMQP_RK_PREFIX)$(fd{kz.encode}));
    $avp(kz_timeout) = $sel(cfg_get.kazoo.registrar_query_timeout_ms);
    $xavp(deltas=>query) = $(TV(Sn){s.replace,.,});

    xlog("L_DEBUG", "publishing to $def(REGISTRAR_AMQP_EXCHANGE) => $var(amqp_routing_key) : $def(REGISTRAR_AMQP_FLAGS) : $var(amqp_payload_request)\n");
    if(kazoo_async_query("$def(REGISTRAR_AMQP_EXCHANGE)", $var(amqp_routing_key), $var(amqp_payload_request), "KZ_AUTHORIZATION_REPLY", "KZ_AUTHORIZATION_TIMEOUT", "$def(REGISTRAR_AMQP_FLAGS)") != 1) {
        xlog("L_INFO", "failed to send registrar query for authentication credentials for $Au $si:$sp\n");
        update_stat("registrar:amqp_async_error", "+1");
        t_drop();
    }
}

failure_route[KZ_AUTHORIZATION_TIMEOUT]
{
    if($(kzR{kz.json,Event-Name}) == "message_returned" ) {
        xlog("L_WARNING", "message was returned by broker $(kzR{kz.json,Error-Code}) $(kzR{kz.json,Error-Reason})\n");
        update_stat("registrar:amqp_returned", "+1");
    } else {
        xlog("L_WARNING", "end - failed $T_reply_code $T_reply_reason [$T(id_index):$T(id_label)] querying directory for authentication credentials for $Au $si:$sp\n");
        update_stat("registrar:amqp_timeout", "+1");
    }
    update_stat("registrar:drops", "+1");
    t_drop();
}

onreply_route[KZ_AUTHORIZATION_REPLY]
{
    $var(StartRoute) = $(TV(Sn){s.replace,.,});
    $var(delta_to_start) = $var(StartRoute) - $(kzR{kz.json,AMQP-Received});
    $var(delta_from_query) = $(kzR{kz.json,AMQP-Received}) - $xavp(deltas=>query);
    xlog("L_INFO", "received $(kzR{kz.json,Event-Category}) $(kzR{kz.json,Event-Name}) reply from $(kzR{kz.json,App-Name})-$(kzR{kz.json,App-Version}) (Δ1 $(kzR{kz.json,AMQP-Elapsed-Micro}) μs , Δ2 $var(delta_to_start) μs, Δ3 $var(delta_from_query) μs)\n");
    $vn(password) = $(kzR{kz.json,Auth-Password});
    $var(nonce) = $adn;
    if( $(kzR{kz.json,Event-Name}) == "authn_err" ) {
       if($(kzR{kz.json,Permanent-Error}) == "true") {
           $sht(auth_cache=>$Au) = "authn_perm_err";
       }
       update_stat("registrar:authn_err", "+1");
       #!ifdef ANTIFLOOD_ROLE
       route(ANITFLOOD_FAILED_AUTH);
       #!endif
       update_stat("registrar:challenge", "+1");
       auth_challenge("$fd", "4");
       xlog("L_INFO", "end - challenging $Au $si:$sp via $(kzR{kz.json,App-Name})-$(kzR{kz.json,App-Version}) response\n");
       exit;
    } else if( $(kzR{kz.json,Event-Name}) == "authn_resp" ) {
       update_stat("registrar:authn_resp", "+1");
       if( $(kzR{kz.json,Trusted-Auth}) == "true" ) {
           route(SUCCESS_AUTHORIZATION);
       } else {
           xlog("L_INFO", "authenticating $Au via $(kzR{kz.json,App-Name})-$(kzR{kz.json,App-Version}) response\n");
           route(CHECK_AUTHORIZATION);
       }
    } else {
       update_stat("registrar:authn_unknown", "+1");
       update_stat("registrar:drops", "+1");
       xlog("L_INFO", "unhandle response from directory $Au via $(kzR{kz.json,App-Name})-$(kzR{kz.json,App-Version})\n");
       t_drop();
    }
}

route[CHECK_AUTHORIZATION]
{

    if (!pv_auth_check("$fd", "$vn(password)", "0", "0")) {
        #!ifdef ANTIFLOOD_ROLE
        route(ANITFLOOD_FAILED_AUTH);
        #!endif

        xlog("L_WARNING", "end - issuing auth challenge to failed registration attempt for $Au from IP $si:$sp\n");
        update_stat("registrar:challenge", "+1");
        auth_challenge("$fd", "5");
        exit;
    }

    #!ifdef ANTIFLOOD_ROLE
    route(ANTIFLOOD_SUCCESSFUL_AUTH);
    #!endif

    route(SUCCESS_AUTHORIZATION);
}

route[SUCCESS_AUTHORIZATION]
{
    # user authenticated - remove auth header
    if($hdr(Proxy-Authorization) != $null) {
        consume_credentials();
    }

    $xavp(ulattrs=>custom_channel_vars) = $(kzR{kz.json,Custom-Channel-Vars});
    $xavp(ulattrs[0]=>token) = $_s($(kzR{kz.json,Custom-Channel-Vars.Authorizing-ID})@$(kzR{kz.json,Custom-Channel-Vars.Account-ID}));

    route(UPDATE_LOCATION);
}

route[UPDATE_LOCATION]
{
    if($(xavp(ulattrs=>custom_channel_vars){s.len}) > 1) {
        $xavp(regpub=>custom_channel_vars) = $xavp(ulattrs=>custom_channel_vars);
    } else {
        $xavp(regpub=>custom_channel_vars) = "{}";
    }
    route(SAVE_LOCATION);
}

route[SAVE_LOCATION]
{

    if ($sht(auth_cache=>$Au) == $null && $vn(password) != $null) {
        xlog("L_INFO", "caching sip credentials for $Au\n");
    };
    $sht(auth_cache=>$Au) = $vn(password);

    route(REGISTRAR_NAT_FLAGS);

    $var(save_result) = save("location", "0x04");
    if($var(save_result) < 0) {
        xlog("L_WARNING", "end - not expected result $var(save_result) when saving $Au registration from IP $si:$sp\n");
        update_stat("registrar:save_error", "+1");
        exit;
    } else {
        if($var(save_result) == 1) {
            $var(new_reg) = "true";
        } else {
           $var(new_reg) = "false";
        }
    }

    if($var(save_result) == 3) {
       $var(expires) = 0;
    } else {
       $var(expires) = $xavp(ulrcd=>expires);
    }

    if($var(expires) == 0) {
       xlog("L_INFO", "end - unregister request from $Au $si:$sp\n");
       $var(Status) = "Unregistered";
    } else {
       $var(Status) = "Registered";
    }

    $var(ip) = $Ri;
    if(af==INET6) {
       $var(ip) = "[" + $Ri + "]";
    }

    route(REGISTRAR_PORT);
    route(REGISTRAR_PROTO);
    route(REGISTRAR_PROXY_PATH);

    $var(AdvIP) = $RAi;
    if(af==INET6) {
       $var(AdvIP) = "[" + $RAi + "]";
    }

    route(PUBLISH_REGISTRATION);

    routes(ON_REGISTRATION);

    exit;
}

route[REGISTRAR_PROXY_PATH]
{
    #!ifdef WITH_INTERNAL_LISTENER
    $var(proxy_path) = $_s(sip:MY_IP_ADDRESS:$def(INTERNAL_PORT);transport=$def(INTERNAL_PROTO));
    #!else
    $var(proxy_path) = $_s(sip:MY_IP_ADDRESS:$var(registrar_port);transport=$var(registrar_proto));
    #!endif
}

route[REGISTRAR_PROTO]
{
    # allow proto redirection on registration

    switch($proto)
    {
        #!ifdef KZ_WEBSOCKETS_REGISTRAR_PROXY_PROTO
        case "ws":
        case "wss":
           $var(registrar_proto) = $def(KZ_WEBSOCKETS_REGISTRAR_PROXY_PROTO);
           break;
        #!endif

        #!ifdef KZ_TLS_REGISTRAR_PROXY_PROTO
        case "tls":
           $var(registrar_proto) = $def(KZ_TLS_REGISTRAR_PROXY_PROTO);
           break;
        #!endif

        #!ifdef KZ_UDP_REGISTRAR_PROXY_PROTO
        case "udp":
           $var(registrar_proto) = $def(KZ_UDP_REGISTRAR_PROXY_PROTO);
           break;
        #!endif

        #!ifdef KZ_TCP_REGISTRAR_PROXY_PROTO
        case "tcp":
           $var(registrar_proto) = $def(KZ_TCP_REGISTRAR_PROXY_PROTO);
           break;
        #!endif

        default:
           $var(registrar_proto) = $proto;
           break;
    }

}

route[REGISTRAR_PORT]
{
    # allow port redirection on registration

    switch($proto)
    {
        #!ifdef KZ_WEBSOCKETS_REGISTRAR_PORT
        case "ws":
        case "wss":
           $var(registrar_port) = KZ_WEBSOCKETS_REGISTRAR_PORT;
           break;
        #!endif

        #!ifdef KZ_TLS_REGISTRAR_PORT
        case "tls":
           $var(registrar_port) = KZ_TLS_REGISTRAR_PORT;
           break;
        #!endif

        #!ifdef KZ_UDP_REGISTRAR_PORT
        case "udp":
           $var(registrar_port) = KZ_UDP_REGISTRAR_PORT;
           break;
        #!endif

        #!ifdef KZ_TCP_REGISTRAR_PORT
        case "tcp":
           $var(registrar_port) = KZ_TCP_REGISTRAR_PORT;
           break;
        #!endif

        default:
           $var(registrar_port) = $Rp;
           break;
    }
}

route[PUBLISH_REGISTRATION]
{
    #!ifdef KZ_REGISTRAR_PUBLISH_REG_ONCE
    if($var(new_reg) != "true" && $(var(expires){s.int}) > 0) {
        xlog("L_INFO", "end - successful re-registration with contact : $ct : $var(expires)\n");
        return;
    }
    #!endif

    $var(proxy_uri) = $_s(sip:$RAi:$RAp;transport=$proto);

    $var(amqp_payload_request) = $_s({"Event-Category" : "directory", "Event-Name" : "reg_success", "Status" : "$var(Status)", "Event-Timestamp" : $TS, "Expires" : $(var(expires){s.int}), "First-Registration" : $var(new_reg), "Contact" : "$(ct{s.escape.common}{s.replace,\','}{s.replace,$$,})", "Call-ID" : "$ci", "Realm" : "$fd", "Username" : "$fU", "From-User" : "$fU", "From-Host" : "$fd", "To-User" : "$tU", "To-Host" : "$td", "User-Agent" : "$(ua{s.escape.common}{s.replace,\','}{s.replace,$$,})" , "Custom-Channel-Vars" : $xavp(regpub=>custom_channel_vars), "Proxy-Path" : "$var(proxy_path)", "Proxy-Protocol" : "$proto", "Proxy-IP" : "$var(AdvIP)", "Proxy-Port" : "$RAp", "Source-IP": "$si", "Source-Port": "$sp", "Proxy-URI" : "$var(proxy_uri)" });
    $var(amqp_routing_key) = "registration.success." + $(fd{kz.encode}) + "." + $(fU{kz.encode});
    if(kazoo_publish("registrar", $var(amqp_routing_key), $var(amqp_payload_request), "$def(REGISTRAR_AMQP_FLAGS)") == 1) {
        xlog("L_INFO", "end - successful $(var(Status){s.tolower}) with contact : $ct : $var(expires)\n");
    }
}

## kazoo event route , {"directory", "reg_flush")  => reg-flush by kamailio limitations
## when a Event-Category or Event-Name has a underscore (_) we need to declare it with a dash (-)
event_route[kazoo:consumer-event-directory-reg-flush]
{
    xlog("L_INFO", "received directory flush for $(kzE{kz.json,Username})@$(kzE{kz.json,Realm})\n");

    route(REGISTRAR_FLUSH);

    if ($(kzE{kz.json,Username}) == "") {
        xlog("L_INFO", "flushed $var(count) entries for realm $(kzE{kz.json,Realm})\n");
    }

    #!ifdef ANTIFLOOD_ROLE
    route(ANTIFLOOD_RESET_AUTH);
    #!endif

}

event_route[kazoo:consumer-event-directory-reg-success]
{
    route(REGISTRAR_FLUSH);
}

route[REGISTRAR_FLUSH]
{
    $var(user) = $(kzE{kz.json,Username}) + "@" + $(kzE{kz.json,Realm});
    if ($(kzE{kz.json,Username}) == "") {
        sht_rm_value_re("auth_cache=>.*@$(kzE{kz.json,Realm})");
    } else {
        if ($sht(auth_cache=>$var(user)) != $null) {
            $sht(auth_cache=>$var(user)) = $null;
        }
    }

    if( $(kzE{kz.json,Cache-Only}) == "true") {
        return;
    }

    $var(Domain) = $(kzE{kz.json,Realm});
    $var(Username) = $(kzE{kz.json,Username});
    $var(Query) = $_s(KZQ_REGISTRAR_FLUSH);

    if($var(Username) != "") {
       $var(Query) = $var(Query) + $_s( and username = "$var(Username)");
    }

    $var(count) = 0;

    if (sql_xquery("cb", "$var(Query)", "ra") == 1)
    {
        while($xavp(ra) != $null) {
          unregister("location", "sip:$xavp(ra=>aor)", "$xavp(ra=>ruid)");
          pv_unset("$xavp(ra)");
          $var(count) = $var(count) + 1;
        }
    }

}

route[KZ_AMQP_BINDING_REGISTRAR_FLUSH]
{
    if(!check_route_exists("KZ_AMQP_BINDING_CUSTOM_REGISTRAR_FLUSH")) {
        #!ifdef KZ_REGISTRAR_PUBLISH_REG_ONCE
        $var(payload) = $_s({"name": "registrar-flush", "exchange": "registrar", "type": "topic", "queue": "registrar-flush-MY_HOSTNAME", "routing": ["registration.flush.*", "registration.success.*"], "federate": true });
        #!else
        $var(payload) = $_s({"name": "registrar-flush", "exchange": "registrar", "type": "topic", "queue": "registrar-flush-MY_HOSTNAME", "routing": "registration.flush.*", "federate": true });
        #!endif
        kazoo_subscribe("$var(payload)");
    }
}

route[KZ_AMQP_BINDING_REGISTRAR_API]
{
    if(!check_route_exists("KZ_AMQP_BINDING_CUSTOM_REGISTRAR_API")) {
        $var(payload) = $_s({"name": "registrar-api", "exchange": "registrar", "type": "topic", "queue": "registrar-api-MY_HOSTNAME", "routing": "registration.search_req.*", "federate": true });
        kazoo_subscribe("$var(payload)");
    }

}

route[REGISTRAR_BOUNDS]
{
    if((int)@contact.expires) {
        $var(expires) = @contact.expires;
    } else if(is_present_hf("Expires")) {
        $var(expires) = $hdr(Expires);
    } else if($(sel(contact){tobody.params}{param.value,expires}) != "") {
        $var(expires) = $(sel(contact){tobody.params}{param.value,expires}{s.int});
    } else {
        if($sel(cfg_get.kazoo.registrar_error_missing_expires) == 1) {
            xlog("L_WARNING", "end - missing expires registering $Au from IP $si:$sp\n");
            send_reply("400", "Missing Expires");
            update_stat("registrar:missing_expires", "+1");
            exit;
        } else {
            update_stat("registrar:missing_expires_allowed", "+1");
            xlog("L_WARNING", "end - allowing missing expires registering $Au from IP $si:$sp\n");
        }
    }

    if($var(expires) != 0) {
       if($var(expires) < REGISTRAR_MIN_EXPIRES) {
           if($sel(cfg_get.kazoo.registrar_error_min_expires) == 1) {
               xlog("L_WARNING", "end - expires $var(expires) too brief (configured $def(REGISTRAR_MIN_EXPIRES)) registering $Au from IP $si:$sp\n");
               append_to_reply("Min-Expires: $def(REGISTRAR_MIN_EXPIRES)\r\n");
               send_reply("423", "Interval Too Brief");
               update_stat("registrar:min_expires", "+1");               
               exit;
           } else {
               update_stat("registrar:min_expires_allowed", "+1");
               xlog("L_WARNING", "end - allowing expires $var(expires) too brief (configured $def(REGISTRAR_MIN_EXPIRES)) registering $Au from IP $si:$sp\n");
           }
       }
    }
}

##
##  this needs handling logic in ecallmgr
##  because we will fire the unregister from this server
##  after device registers in another proxy
##  causing ecallmgr to delete the registration
##  from the other server
##
event_route[usrloc:contact-expired]
{
    #!ifdef PRESENCE_ROLE
    route(PRESENCE_EXPIRED_REGISTRATION);
    #!endif

    ## return until we handle this in ecallmr
    xlog("L_INFO", "removed registration for $ulc(exp=>aor) with contact : $ulc(exp=>addr)\n");
    return;

    $var(transport) = $(ulc(exp=>received){uri.transport});
    $var(proto) = $(ulc(exp=>socket){re.subst,/^([^:]*):(.*)/\1/});
    if($var(proto) == "tls" && $var(transport) == "ws") {
       $var(proto) = "wss";
    }
    $var(handle) = 0;
    switch($var(proto))
    {
        case "ws":
        case "wss":
            if($sel(cfg_get.kazoo.registrar_handle_expired_ws) == 1) {
                $var(handle) = 1;
            }
            break;

        case "tls":
            if($sel(cfg_get.kazoo.registrar_handle_expired_tls) == 1) {
                $var(handle) = 1;
            }
            break;

        case "tcp":
            if($sel(cfg_get.kazoo.registrar_handle_expired_tcp) == 1) {
                $var(handle) = 1;
            }
            break;

        case "udp":
            if($sel(cfg_get.kazoo.registrar_handle_expired_udp) == 1) {
                $var(handle) = 1;
            }
            break;

        default:
           break;
    }

    if($var(handle) == 1) {
        $var(aor) = $_s(sip:$ulc(exp=>aor));
        $var(username) = $(var(aor){uri.user});
        $var(domain) = $(var(aor){uri.host});
        $var(amqp_payload_request) = $_s({"Event-Category" : "directory", "Event-Name" : "reg_success", "Status" : "Unregistered", "Event-Timestamp" : $TS, "Expires" : 0, "First-Registration" : false, "Contact" : "$(ulc(exp=>addr){s.escape.common}{s.replace,\','}{s.replace,$$,})", "Call-ID" : "$ulc(exp=>callid)", "Realm" : "$var(domain)", "Username" : "$var(username)", "From-User" : "$var(username)", "From-Host" : "$var(domain)", "To-User" : "$var(username)", "To-Host" : "$var(domain)", "Proxy-Path" : "$ulc(exp=>socket)", "User-Agent" : "$(ulc(exp=>user_agent){s.escape.common}{s.replace,\','}{s.replace,$$,})"});
        $var(amqp_routing_key) = "registration.success." + $(var(domain){kz.encode}) + "." + $(var(username){kz.encode});
        kazoo_publish("registrar", $var(amqp_routing_key), $var(amqp_payload_request));
        xlog("L_INFO", "notified registration removal with contact : $ulc(exp=>addr)\n");
    }
    xlog("L_INFO", "removed registration for $ulc(exp=>aor) with contact : $ulc(exp=>addr)\n");
}

#!ifdef REGISTRAR_SYNC_ROLE
#!include_file "registrar-sync-role.cfg"
#!endif

#!trydef AOR_NOT_SUBSCRIBED_APPEND_REASON
#!trydef AOR_NOT_SUBSCRIBED_REASON Reason: Q.850; cause=20;text="Subscriber Absent"

route[ROUTE_TO_EXTERNAL_AOR]
{
    if ($hdr(X-KAZOO-AOR) == $null) {
       xlog("L_DEBUG", "not aor\n");
       return;
    }

    xlog("L_INFO", "using aor $hdr(X-KAZOO-AOR) with format $hdr(X-KAZOO-INVITE-FORMAT)\n");
    if ($hdr(X-KAZOO-INVITE-FORMAT) == "route") {
       xlog("L_INFO", "routing $hdr(X-KAZOO-AOR) to $ruri\n");
    } else if ($hdr(X-KAZOO-INVITE-FORMAT) =~ "contact|username") {
       if(lookup("location", "$hdr(X-KAZOO-AOR)") > 0) {
          xlog("L_INFO", "end - routing to contact $ru\n");
          $avp(aor) = $hdr(X-KAZOO-AOR);
          handle_ruri_alias();
       } else {
          xlog("L_INFO", "end - lookup for AOR $hdr(X-KAZOO-AOR) failed\n");
          append_to_reply("$def(AOR_NOT_SUBSCRIBED_REASON)\r\n");
          send_reply("480", "Not registered");
          exit;
       }
    } else if (reg_fetch_contacts("location", "$hdr(X-KAZOO-AOR)", "callee")) {
       $du = $(ulc(callee=>received));
       $fs = $(ulc(callee=>socket));
       $bf = $bf | $(ulc(callee=>cflags));
       xlog("L_INFO", "routing $hdr(X-KAZOO-AOR) to $du via $fs\n");
       $avp(aor) = $hdr(X-KAZOO-AOR);
    } else {
       xlog("L_INFO", "end - user is not registered\n");
       append_to_reply("$def(AOR_NOT_SUBSCRIBED_REASON)\r\n");
       send_reply("410", "Not registered");
       exit;
    }
}



route[AUTHORIZATION_CHECK_REGISTERED]
{
    if (isflagset(FLAG_AUTHORIZED)) return;

    $xavp(regcfg=>match_received) = $su;
    if (registered("location","sip:$Au", 2, 1) == 1) {
        xlog("L_INFO", "authorized for registered device\n");
        route(SETUP_AUTH_ORIGIN);
        $xavp(hf[0]=>X-AUTH-Token) = $xavp(ulattrs=>token);
        setflag(FLAG_AUTHORIZED);
        setflag(FLAG_REGISTERED_ENDPOINT);
    }
}

route[SETUP_AUTH_AOR]
{
    if ($avp(is_registered) == "true") return;

    $xavp(regcfg=>match_received) = $su;
    if (registered("location","sip:$Au", 2, 1) == 1) {
        $avp(is_registered) = "true";
    }
}


# vim: tabstop=4 softtabstop=4 shiftwidth=4 expandtab
