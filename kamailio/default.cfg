
######## Kamailio mqueue module ########
loadmodule "mqueue.so"

######## Kamailio outbound module ########
loadmodule "outbound.so"

######## Kamailio stun module ########
loadmodule "stun.so"

######## Kamailio path module ########
loadmodule "path.so"

######## Kamailio control connector module ########
loadmodule "ctl.so"
modparam("ctl", "binrpc_buffer_size", 4096)
loadmodule "cfg_rpc.so"

######## Kamailio config utils module ########
loadmodule "cfgutils.so"
modparam("cfgutils", "lock_set_size", 4)

######## Kamailio corex module ########
loadmodule "corex.so"

######## Kamailio uuid module ########
loadmodule "uuid.so"

######## Kamailio core extensions module ########
loadmodule "kex.so"

######## Transaction (stateful) module ########
loadmodule "tm.so"
loadmodule "tmx.so"
modparam("tm", "auto_inv_100", 1)
modparam("tm", "auto_inv_100_reason", "Attempting to connect your call")
modparam("tm", "cancel_b_method", 2)
modparam("tm", "ruri_matching", 0)
modparam("tm", "failure_reply_mode", 3)
modparam("tm", "failure_exec_mode", 1)
modparam("tm", "reparse_on_dns_failover", 0)


# modparam("tm", "fr_timer", 30000)
# modparam("tm", "fr_inv_timer", 120000)

######## Stateless replier module ########
loadmodule "sl.so"

######## Record-Route and Route module ########
loadmodule "rr.so"
modparam("rr", "enable_full_lr", RR_FULL_LR)
modparam("rr", "enable_double_rr", RR_DOUBLE_RR)
modparam("rr", "force_send_socket", RR_FORCE_SOCKET)
modparam("rr", "ignore_sips", 1)

######## Max-Forward processor module ########
loadmodule "maxfwd.so"
modparam("maxfwd", "max_limit", 50)

######## SIP utilities [requires sl] ########
loadmodule "siputils.so"

######## Text operations module ########
loadmodule "textopsx.so"

######## TCP operations module ########
loadmodule "tcpops.so"

######## sdp operations module ########
loadmodule "sdpops.so"

######## Generic Hash Table container in shared memory ########
loadmodule "htable.so"
modparam("htable", "htable", "associations=>size=16;autoexpire=7200")
modparam("htable", "db_url", "KAZOO_DB_URL")

####### RTIMER module ##########
loadmodule "rtimer.so"

####### evrexec module ##########
loadmodule "evrexec.so"
modparam("evrexec", "exec", "name=evrexec:DEFERRED_INIT;wait=20000000;workers=1;")

######## Advanced logger module ########
loadmodule "xlog.so"

######## UAC ########
loadmodule "uac.so"

######## AVP's ########
loadmodule "avp.so"
loadmodule "avpops.so"

######## UAC Redirection module ########
loadmodule "uac_redirect.so"

#### json rpc ####
loadmodule "jsonrpcs.so"

####### SQL OPS module ##########
loadmodule "sqlops.so"
modparam("sqlops","sqlcon", "cb=>KAZOO_DB_URL")
modparam("sqlops","sqlcon", "exec=>KAZOO_DB_URL")

####### DEBUG ######
loadmodule "debugger.so"
modparam("debugger", "mod_hash_size", 5)
modparam("debugger", "mod_level_mode", 1)
modparam("debugger", "mod_level", "core=1")
modparam("debugger", "mod_level", "tm=0")

####### STATISTICS ######
loadmodule "statistics.so"

####### DATABASE module ##########
include_file "db_KAMAILIO_DBMS.cfg"

###### kazoo bindings ######
include_file "kazoo-bindings.cfg"

####### Role Configurations ##########
#!ifdef DISPATCHER_ROLE
include_file "dispatcher-role-MAJOR.cfg"
#!endif
#!ifdef REGISTRAR_ROLE
include_file "registrar-role.cfg"
#!endif
#!ifdef PRESENCE_ROLE
include_file "presence-role.cfg"
#!endif
#!ifdef MESSAGE_ROLE
include_file "message-role.cfg"
#!endif
#!ifdef NAT_TRAVERSAL_ROLE
include_file "nat-traversal-role.cfg"
#!endif
#!ifdef TLS_ROLE
include_file "tls-role.cfg"
#!endif
#!ifdef ACCOUNTING_ROLE
include_file "accounting-role.cfg"
#!endif
#!ifdef ANTIFLOOD_ROLE
include_file "antiflood-role.cfg"
#!endif
#!ifdef TRAFFIC_FILTER_ROLE
include_file "traffic-filter-role.cfg"
#!endif
#!ifdef ACL_ROLE
include_file "acl-role.cfg"
#!endif
#!ifdef RATE_LIMITER_ROLE
include_file "rate-limiter-role.cfg"
#!endif
#!ifdef PUSHER_ROLE
include_file "pusher-role.cfg"
#!endif
#!ifdef RESPONDER_ROLE
include_file "responder-role.cfg"
#!endif
#!ifdef NODES_ROLE
include_file "nodes-role.cfg"
#!endif
#!ifdef SIP_TRACE_ROLE
include_file "sip_trace-role.cfg"
#!endif
#!ifdef SIP_TRACE_ALL_ROLE
include_file "sip_trace_all-role.cfg"
#!endif
#!ifdef BLOCKER_ROLE
include_file "blocker-role.cfg"
#!endif

## sanity ##
include_file "sanity.cfg"

## http ##
include_file "http.cfg"

## auth ##
include_file "trusted.cfg"
include_file "authorization.cfg"

###### local route ######
socket_workers=5
listen=tcp:127.0.0.1:5090

####### Routing Logic ########
route
{
    route(LOCAL_REQUEST);

    route(SANITY_CHECK);

    route(CHECK_RETRANS);

    #!ifdef ANTIFLOOD_ROLE
    route(ANTIFLOOD_LIMIT);
    #!endif

    #!ifdef TRAFFIC_FILTER_ROLE
    route(FILTER_REQUEST);
    #!endif

    #!ifdef ACL_ROLE
    route(ACL_CHECK);
    #!endif

    #!ifdef RATE_LIMITER_ROLE
    route(DOS_PREVENTION);
    #!endif

    route(LOG_REQUEST);

    route(CLASSIFY_SOURCE);

    #!ifdef NAT_TRAVERSAL_ROLE
    route(NAT_DETECT);
    #!endif

    route(HANDLE_OPTIONS);

    #!ifdef SIP_TRACE_ROLE
    route(SIP_TRACE);
    #!endif

    routes("KZ_$(rm)_START_ROUTE_");

    route(HANDLE_NOTIFY);

    #!ifdef REGISTRAR_ROLE
    route(HANDLE_REGISTER);
    #!endif

    #!ifdef RESPONDER_ROLE
    if (isflagset(FLAG_INTERNALLY_SOURCED)) {
        route(HANDLE_RESPOND);
    }
    #!endif

    if (!has_totag() && !t_newtran()) {
        xlog("L_ERROR", "$ci|default|failed to create transaction\n");
        drop;
        exit;
    }

    route(HANDLE_AUTHORIZATION);

}

route[MAIN]
{
    if (!isflagset(FLAG_INTERNALLY_SOURCED)) {
        route(AUTHORIZATION);
        remove_hf("Authorization");
    }

    #!ifdef MESSAGE_ROLE
    route(HANDLE_MESSAGE);
    #!else
    if (is_method("MESSAGE")) {
        sl_send_reply("405", "Method Not Allowed");
        exit;
    }
    #!endif

    #!ifdef PRESENCE_ROLE
    route(HANDLE_SUBSCRIBE);
    route(HANDLE_PUBLISH);
    #!endif

    route(HANDLE_REFER);

    route(HANDLE_IN_DIALOG_REQUESTS);

    route(PREPARE_INITIAL_REQUESTS);

    #!ifdef PUSHER_ROLE
    route(PUSHER_ROUTE);
    #!endif

    route(SETUP);
}

#!trydef KZ_LOG_REQUEST_OPTIONS 0
kazoo.log_request_options = KZ_LOG_REQUEST_OPTIONS descr "log OPTIONS requests, default is 0 for preserving log size"

route[LOG_REQUEST]
{
    if($sel(cfg_get.kazoo.log_request_options) == 0 && is_method("OPTIONS")) {
      $var(log_request_level) = L_DBG;
    } else {
      $var(log_request_level) = L_INFO;
    }

    # log the basic info regarding this call
    xlog("$var(log_request_level)", "$ci|start|received $pr request $rm $ou\n");
    xlog("$var(log_request_level)", "$ci|default|source $si:$sp -> $RAi:$RAp\n");
    xlog("$var(log_request_level)", "$ci|default|from $fu\n");
    xlog("$var(log_request_level)", "$ci|default|to $tu\n");
}

route[CHECK_RETRANS]
{
    # handle retransmissions
    if (!is_method("ACK")) {
        if(t_precheck_trans()) {
            t_check_trans();
            exit;
        }
        t_check_trans();
    }
}

route[CLASSIFY_SOURCE]
{
    if (allow_source_address()) {
        xlog("$var(log_request_level)", "$ci|default|request from trusted IP\n");
        setflag(FLAG_TRUSTED_SOURCE);
        return;
    }

    #!ifdef DISPATCHER_ROLE
    route(DISPATCHER_CLASSIFY_SOURCE);
    #!endif

}

route[HANDLE_OPTIONS]
{
    if (!is_method("OPTIONS")) {
        return;
    }

    if (isflagset(FLAG_INTERNALLY_SOURCED)) {
        route(INTERNAL_TO_EXTERNAL_RELAY);
    } else {
        #!ifdef TRAFFIC_FILTER_ROLE
        if (!isflagset(FLAG_TRUSTED_SOURCE)) {
            route(FILTER_REQUEST_DOMAIN);
        }
        #!endif
        
        sl_send_reply("200", "Rawr!!");

        #!ifdef KEEPALIVE_ROLE
        route(KEEPALIVE_ON_OPTIONS);
        #!endif
    }
    exit;
}

route[HANDLE_NOTIFY]
{
    if (!is_method("NOTIFY")) return;

    if (has_totag()) return;

    if (isflagset(FLAG_INTERNALLY_SOURCED)) {
        if (loose_route()) {
            xlog("L_INFO", "$ci|default|Able to loose-route. Cool beans!\n");
        }

        #!ifdef REGISTRAR_ROLE
        if (registered("location")) {
            lookup("location");
            xlog("L_INFO", "$ci|default|routing to $ruid\n");
        }
        #!endif

        ## verify we're not routing to ourselves
        if(is_myself($du)) {
            xlog("L_INFO", "$ci|default|notify from internal to invalid destination $ruid\n");
            sl_send_reply("200", "Rawr!!");
            exit;
        }

        route(INTERNAL_TO_EXTERNAL_RELAY);
    } else {
        #!ifdef TRAFFIC_FILTER_ROLE
        if (!isflagset(FLAG_TRUSTED_SOURCE)) {
            route(FILTER_REQUEST_DOMAIN);
        }
        #!endif

        if($hdr(Event) == "keep-alive") {
           xlog("L_INFO", "$ci|stop|replying to keep alive\n");
           sl_send_reply("405", "Stay Alive / Method Not Allowed");
        } else {
           xlog("L_INFO", "$ci|stop|consuming event $hdr(Event)\n");
           sl_send_reply("200", "Rawr!!");
        }

    }
    exit;
}

route[HANDLE_REFER]
{
    if (!is_method("REFER")) {
        return;
    }

    if(is_present_hf("Referred-By")) {
       $var(referred_by) = $hdr(Referred-By);
    } else {
       $var(referred_by) = $_s(<sip:$Au>;created=true);
    }

    if(!isflagset(FLAG_INTERNALLY_SOURCED)) {
      if(isflagset(FLAG_REGISTERED_ENDPOINT)) {
         $var(referred_by) = $_s($var(referred_by);endpoint_id=$(xavp(ulattrs=>token){re.subst,/(.*)@(.*)/\1/});account_id=$(xavp(ulattrs=>token){re.subst,/(.*)@(.*)/\2/}));
      }
    } else {
      record_route();
    }

    remove_hf_re("^Referred-By");
    append_hf("Referred-By: $var(referred_by)\r\n");

}

route[HANDLE_IN_DIALOG_REQUESTS]
{
    if (!has_totag()) return;

    if (is_method("INVITE")) {
       setflag(FLAG_SESSION_PROGRESS);
       record_route();
    }

    if (loose_route()) {

        #!ifdef NAT_TRAVERSAL_ROLE
        if (handle_ruri_alias() != 1 && is_method("ACK") ) {
            # ACK is forwarded statelessly
            xlog("L_INFO", "$ci|default|forward ack statelessly\n");
            route(NAT_MANAGE);
        }
        #!endif

        #!ifdef ACCOUNTING_ROLE
        if (is_method("BYE")) {
            setflag(FLAG_ACC);
            setflag(FLAG_ACCFAILED);
        }
        #!endif

        xlog("L_INFO", "$ci|default|loose_route in-dialog message\n");
        # Called on in-dialog requests
        # If the request in an Invite for on hold from external to internal,
        # associate the contact with the media server
        # if Invite for on hold, we need to associate the contact URI with the next hop
        if (is_method("INVITE") && !isflagset(FLAG_INTERNALLY_SOURCED) && is_audio_on_hold()) {
            setflag(FLAG_ASSOCIATE_USER);
        }

        # If the request in an Invite for t38 from internal,
        # mark the request with FLT_T38
        if (is_method("INVITE") && isflagset(FLAG_INTERNALLY_SOURCED) && sdp_with_media("image")) {
            xlog("L_DEBUG", "$ci|default|T38 RE-INVITE\n");
            setflag(FLT_T38);
        }

        if ( is_method("NOTIFY") ) {
             # Add Record-Route for in-dialog NOTIFY as per RFC 6665.
             record_route();
        }
        route(RELAY);
    } else if (isflagset(FLAG_INTERNALLY_SOURCED)) {
        xlog("L_INFO", "$ci|default|relay internally sourced in-dialog message without loose_route\n");
        #!ifdef NAT_TRAVERSAL_ROLE
        if(!isdsturiset()) {
            handle_ruri_alias();
        }
        #!endif
        route(RELAY);
    } else if (t_check_trans()) {
        xlog("L_INFO", "$ci|default|allow message for a known transaction\n");
        if ( is_method("NOTIFY") ) {
             # Add Record-Route for in-dialog NOTIFY as per RFC 6665.
             record_route();
        }
        route(RELAY);
    } else {
        #!ifdef NAT_TRAVERSAL_ROLE
        if(!isdsturiset()) {
            if (handle_ruri_alias() == 1) {
                xlog("L_INFO", "$ci|default|message had a to-tag but can't be loose routed, routing with alias\n");
                t_relay();
                exit;
            };
        }
        #!endif
        xlog("L_INFO", "$ci|default|message had a to-tag but can't be loose routed\n");
        sl_send_reply("481", "Call Leg/Transaction Does Not Exist");
    }
    exit();
}

route[PREPARE_INITIAL_REQUESTS]
{
    #!ifdef NAT_TRAVERSAL_ROLE
    if(!isdsturiset()) {
        handle_ruri_alias();
    }
    #!endif

    if (is_method("CANCEL")) {
        if (t_check_trans()) {
            route(RELAY);
        } else {
            send_reply("481", "Call leg/transaction does not exist");
        }
        exit();
    } else if (is_method("ACK")) {
        if (t_check_trans()) {
            route(RELAY);
        }
        exit();
    }

    if (is_method("UPDATE")) {
        xlog("L_WARN", "$ci|end|update outside dialog not allowed\n");
        send_reply("403", "Dialog does not exist");
        break;
    }

    if (is_method("BYE|PRACK")) {
        xlog("L_WARN", "$ci|end|originating subsequent requests outside dialog not allowed\n");
        send_reply("403", "Dialog does not exist");
        break;
    }

    if (!isflagset(FLAG_INTERNALLY_SOURCED)) {
        xlog("L_INFO", "$ci|log|call is not from internal source, recording route\n");
        remove_hf("Route");
        record_route();
    } else if (loose_route()) {
        xlog("L_WARN", "$ci|end|loose routing of internal initial request\n");
        exit();
    }

}

route[SETUP]
{

    #!ifdef DISPATCHER_ROLE
    if (!isflagset(FLAG_INTERNALLY_SOURCED)) {
        route(DISPATCHER_FIND_ROUTES);
    } else {
        route(ROUTE_TO_EXTERNAL);
    }
    #!endif

    route(RELAY);
}

route[BRANCH_HEADERS]
{
    if (!isflagset(FLAG_INTERNALLY_SOURCED)) {
        if (!has_totag()) {
            route(AUTH_HEADERS);
        }
    } else {
        if (isflagset(FLAG_OUTBOUND_DISPATCHER)) {
            if ($xavp(cr=>dispatcher_route) != $null) {
                route_if_exists($_s($xavp(cr=>dispatcher_route)_CUSTOM_BRANCH));
            }
        }
        route(REMOVE_RESERVED_HEADERS);
    }
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
    xlog("L_INFO", "$ci|branch|new branch [$T_branch_idx] to $ru\n");
    #!ifdef NAT_TRAVERSAL_ROLE
    if (!isflagset(FLAG_SKIP_NAT_MANAGE)) {
        route(NAT_MANAGE);
    }
    #!endif

    route(BRANCH_HEADERS);
    routes("BRANCH_HEADERS_");

# add proxy-core-uuid
    if (!isflagset(FLAG_INTERNALLY_SOURCED)) {
        append_hf("X-Proxy-Core-UUID: $shv(kz_proxy_core_uuid)\r\n");
    }
}

route[RELAY]
{
    if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE|NOTIFY|CANCEL")) {
        if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
    }

    if (isflagset(FLAG_INTERNALLY_SOURCED)) {
        xlog("L_DEBUG", "$ci|relay|internal to external\n");
        if(!isflagset(FLAG_RECORD_ROUTE_ADDED) && !has_totag()) {
           xlog("L_DEBUG", "$ci|relay|adding record route\n");
           record_route();
        }
        route(INTERNAL_TO_EXTERNAL_RELAY);
    } else {
        xlog("L_DEBUG", "$ci|relay|external to internal\n");
        route(EXTERNAL_TO_INTERNAL_RELAY);
    }

    exit();
}

route[INTERNAL_TO_EXTERNAL_RELAY]
{
    #!ifdef ACCOUNTING_ROLE
    if (is_method("INVITE")) {
        setflag(FLAG_ACC);
        setflag(FLAG_ACCFAILED);
    }
    #!endif

    routes("INTERNAL_TO_EXTERNAL_RELAY_");

    t_on_reply("EXTERNAL_REPLY");
    t_on_failure("EXTERNAL_FAULT");

    if($sel(cfg_get.kazoo.use_progressive_timers) == 1) {
        t_set_fr(0, $sel(cfg_get.kazoo.to_external_no_response_initial_timer));
    } else {
        t_set_fr(0, $sel(cfg_get.kazoo.to_external_no_response_timer));
    }

    t_relay();
}

route[EXTERNAL_TO_INTERNAL_RELAY]
{
    #!ifdef ACCOUNTING_ROLE
    if (is_method("INVITE") && is_present_hf("Proxy-Authorization")) {
        setflag(FLAG_ACC);
        setflag(FLAG_ACCFAILED);
    }
    #!endif

    routes("EXTERNAL_TO_INTERNAL_RELAY_");

    t_on_reply("INTERNAL_REPLY");
    t_on_failure("INTERNAL_FAULT");

    if($sel(cfg_get.kazoo.use_progressive_timers) == 1) {
        t_set_fr(0, $sel(cfg_get.kazoo.to_internal_no_response_initial_timer));
    } else {
        t_set_fr(0, $sel(cfg_get.kazoo.to_internal_no_response_timer));
    }

    #!ifdef WITH_INTERNAL_LISTENER
    #!ifndef NO_FORCE_INTERNAL_LISTENER
    xlog("L_DEBUG", "$ci|route|routing to internal thru PROTO_LISTENER_INTERNAL\n");
    force_send_socket(PROTO_LISTENER_INTERNAL);
    #!endif
    #!endif
 
    t_relay();
}

onreply_route[EXTERNAL_REPLY]
{
    if ($rs < 300) {
        xlog("L_INFO", "$ci|default|external reply $T_reply_code $T_reply_reason\n");
    }

    routes("EXTERNAL_REPLY_");

    if($rs == 100) {
        if($sel(cfg_get.kazoo.use_progressive_timers) == 1) {
            t_set_fr(0, $sel(cfg_get.kazoo.to_external_no_response_100_timer));
        }
    } else if(status=~"[1][8][0-9]") {
        if($sel(cfg_get.kazoo.use_progressive_timers) == 1) {
            t_set_fr(0, $sel(cfg_get.kazoo.to_external_no_response_18X_timer));
        }
    }

    #!ifdef NAT_TRAVERSAL_ROLE
    route(NAT_MANAGE);
    #!endif

    #!ifdef ACL_ROLE
    setflag(FLAG_IS_REPLY);
    route(ACL_CHECK);
    #!endif

    #!ifdef RATE_LIMITER_ROLE
    setflag(FLAG_IS_REPLY);
    route(DOS_PREVENTION);
    #!endif

}

failure_route[EXTERNAL_FAULT]
{
    # this branch handles failures (>=300) to external

    routes("EXTERNAL_FAULT_");

    # if the failure cause was due to the transaction being
    # cancelled then we are complete
    if (t_is_canceled()) {
        xlog("L_INFO", "$ci|default|transaction was cancelled\n");
        exit;
    }

    xlog("L_INFO", "$ci|failure|external reply $T_reply_code $T_reply_reason\n");
    if(isflagset(FLAG_OUTBOUND_DISPATCHER)) {
        route(DISPATCHER_NEXT_ROUTE);
    }
}


onreply_route[INTERNAL_REPLY]
{
    # this route handles replies that are comming from our media server
    if ($rs < 300) {
        xlog("L_INFO", "$ci|default|internal reply $T_reply_code $T_reply_reason\n");
    }

    #!ifdef NAT_TRAVERSAL_ROLE
    route(NAT_MANAGE);
    #!endif

    routes("INTERNAL_REPLY_");

    if($rs == 100) {
        if($sel(cfg_get.kazoo.use_progressive_timers) == 1) {
            t_set_fr(0, $sel(cfg_get.kazoo.to_internal_no_response_100_timer));
        }
    } else if(status=~"[1][8][0-9]") {
        if($sel(cfg_get.kazoo.use_progressive_timers) == 1) {
            t_set_fr(0, $sel(cfg_get.kazoo.to_internal_no_response_18X_timer));
        }
    }

    #!ifdef ACL_ROLE
    setflag(FLAG_IS_REPLY);
    route(ACL_CHECK);
    #!endif

    #!ifdef RATE_LIMITER_ROLE
    setflag(FLAG_IS_REPLY);
    route(DOS_PREVENTION);
    #!endif

    if (is_method("INVITE") && t_check_status("(180)|(183)|(200)")) {
        xlog("L_INFO", "$ci|default|call setup, now ignoring abnormal termination\n");
        setflag(FLAG_SESSION_PROGRESS);
    }

    route(REMOVE_RESERVED_HEADERS);

}

failure_route[INTERNAL_FAULT]
{
    # this branch handles failures (>=300) to our media servers,
    # which we can sometimes overcome by routing to another server

    #!ifdef NAT_TRAVERSAL_ROLE
    route(NAT_MANAGE);
    #!endif

    routes("INTERNAL_FAULT_");

    # if the failure cause was due to the transaction being
    # cancelled then we are complete
    if (t_is_canceled()) {
        xlog("L_INFO", "$ci|default|transaction was cancelled\n");
        exit;
    }

    if (!is_method("INVITE") ||  has_totag()) {
       xlog("L_INFO", "$ci|failure|internal reply $T_reply_code $T_reply_reason\n");
       return;
    }

    # Handle redirects
    if (t_check_status("302") && $T_rpl($hdr(X-Redirect-Server)) != $null) {
        route(INTERNAL_REDIRECT);
    }

    route(REMOVE_RESERVED_HEADERS);

    # change 6xx to 4xx
    if (t_check_status("6[0-9][0-9]") && !t_check_status("600|603|604|606|607")) {
        $var(new_code) = "4" + $(T_reply_code{s.substr,1,0});
        xlog("L_INFO", "$ci|failure|sending $T_reply_code reply as $var(new_code) $T_reply_reason\n");
        t_reply("$(var(new_code){s.int})", "$T_reply_reason");

    # if the failure case was something that we should recover
    # from then try to find a new media server
    } else if ($T_reply_reason =~ "call barred") {
        xlog("L_INFO", "$ci|failure|ignoring call barred\n");
    } else if (isflagset(FLAG_SESSION_PROGRESS)) {
        xlog("L_INFO", "$ci|failure|ignoring failure after session progress\n");
        if (t_check_status("480")) {
            xlog("L_INFO", "$ci|failure|overriding reply code 480 with $sel(cfg_get.kazoo.override_media_reply_480)\n");
            send_reply("$(sel(cfg_get.kazoo.override_media_reply_480){s.int})", "Endpoint Not Available");
        }
    } else if (t_check_status("403") && $T_reply_reason=="Forbidden") {
        xlog("L_WARNING", "$ci|failure|Failed auth from IP $si\n");
    } else if (t_check_status("(401)|(486)")) {
        xlog("L_INFO", "$ci|failure|auth reply $T_reply_code $T_reply_reason\n");
    } else if (t_check_status("402")) {
        xlog("L_INFO", "$ci|failure|overriding reply code 402 with 486\n");
        send_reply("486", "Insufficient Funds");
    } else if (t_check_status("(4[0-9][0-9])|(5[0-9][0-9])")) {
        xlog("L_INFO", "$ci|failure|internal reply $T_reply_code $T_reply_reason\n");

        #!ifdef DISPATCHER_ROLE
        route(DISPATCHER_NEXT_ROUTE);
        #!endif

        send_reply("486", "Unable to Comply");

    } else {
        xlog("L_INFO", "$ci|failure|internal reply $T_reply_code $T_reply_reason\n");
        send_reply("$T_reply_code", "$T_reply_reason");
    }
}

route[INTERNAL_REDIRECT]
{
    xlog("L_INFO", "$ci|default|redirect to $T_rpl($hdr(X-Redirect-Server))\n");
    $du = $T_rpl($hdr(X-Redirect-Server));
    t_on_branch("MANAGE_BRANCH");
    t_on_reply("INTERNAL_REPLY");
    t_on_failure("INTERNAL_FAULT");
    t_set_fr(0, 1000);
    t_relay();
    exit();
}


onsend_route {
    if (isflagset(FLAG_ASSOCIATE_USER) && is_request()) {
        $var(user_source) = $(ct{tobody.user}) + "@" + $si + ":" + $sp;
        xlog("L_INFO", "$ci|default|associate traffic from $var(user_source) with media server sip:$(ruri{uri.host}):$(ruri{uri.port});transport=$sndto(sproto)\n");
        $sht(associations=>$var(user_source)) = "sip:" + $(ruri{uri.host}) + ":" + $(ruri{uri.port}) + ";transport=" + $sndto(sproto);
    }

    #!ifdef SIP_TRACE_ROLE
    if (is_method("ACK") && isflagset(FLAG_SIP_TRACE) && is_request()) {
        sip_trace();
    }
    #!endif

    if(!isflagset(FLAG_LOCAL_ROUTE)) {
        xlog("L_INFO", "$ci|pass|$snd(sproto)|$sndfrom(ip):$sndfrom(port) -> $sndto(ip):$sndto(port)\n");
    }
}

#!trydef AOR_NOT_SUBSCRIBED_APPEND_REASON
#!trydef AOR_NOT_SUBSCRIBED_REASON Reason: Q.850; cause=20;text="Subscriber Absent"

route[ROUTE_TO_AOR]
{
    if ($hdr(X-KAZOO-AOR) == $null) {
       xlog("L_DEBUG", "$ci|aor|not aor\n");
       return;
    }

    xlog("L_INFO", "$ci|default|using AOR $hdr(X-KAZOO-AOR) with format $hdr(X-KAZOO-INVITE-FORMAT)\n");
    if ($hdr(X-KAZOO-INVITE-FORMAT) == "route") {
       xlog("L_INFO", "$ci|default|routing $hdr(X-KAZOO-AOR) to $ruri\n");
    } else if ($hdr(X-KAZOO-INVITE-FORMAT) =~ "contact|username") {
       if(lookup("location", "$hdr(X-KAZOO-AOR)") > 0) {
          xlog("L_INFO", "$ci|end|routing to contact $ru\n");
          $avp(aor) = $hdr(X-KAZOO-AOR);
          handle_ruri_alias();
       } else {
          xlog("L_INFO", "$ci|end|lookup for AOR $hdr(X-KAZOO-AOR) failed\n");
          append_to_reply("$def(AOR_NOT_SUBSCRIBED_REASON)\r\n");
          send_reply("480", "Not registered");
          exit;
       }
    } else if (reg_fetch_contacts("location", "$hdr(X-KAZOO-AOR)", "callee")) {
       $du = $(ulc(callee=>received));
       $fs = $(ulc(callee=>socket));
       $bf = $bf | $(ulc(callee=>cflags));
       xlog("L_INFO", "$ci|default|routing $hdr(X-KAZOO-AOR) to $du via $fs\n");
       $avp(aor) = $hdr(X-KAZOO-AOR);
    } else {
       xlog("L_INFO", "$ci|end|user is not registered\n");
       append_to_reply("$def(AOR_NOT_SUBSCRIBED_REASON)\r\n");
       send_reply("410", "Not registered");
       exit;
    }
}

route[ROUTE_TO_GROUP]
{
    if ($hdr(X-KAZOO-Dispatcher-Group) == $null)  {
       return;
    }

    $var(ds_primary_group) = $(hdr(X-KAZOO-Dispatcher-Group){s.int});
    $vn(dispatcher_route) = $hdr(X-KAZOO-Dispatcher-Route);

    xlog("L_INFO", "$ci|log|routing to group $hdr(X-KAZOO-Dispatcher-Group) : $hdr(X-KAZOO-Dispatcher-Route)\n");

    if ($vn(dispatcher_route) != $null)  {
        xlog("L_DEBUG", "$ci|log|running $_s($vn(dispatcher_route)_BEFORE_DISPATCHER)\n");
        route_if_exists($_s($vn(dispatcher_route)_BEFORE_DISPATCHER));
    }

    route(DISPATCHER_SELECT_ROUTES);

    if ($vn(dispatcher_route) != $null)  {
        xlog("L_DEBUG", "$ci|log|running $_s($vn(dispatcher_route)_AFTER_DISPATCHER)\n");
        route_if_exists($_s($vn(dispatcher_route)_AFTER_DISPATCHER));
        $xavp(cr=>dispatcher_route) = $vn(dispatcher_route);
    }

    setflag(FLAG_OUTBOUND_DISPATCHER);
}

route[ROUTE_TO_CUSTOM]
{
    if ($hdr(X-KAZOO-Route) == $null)  {
       return;
    }

    $var(custom_route) = $hdr(X-KAZOO-Route);
}

route[ROUTE_TO_EXTERNAL]
{
	route(ROUTE_TO_AOR);
	route(ROUTE_TO_GROUP);
	route(ROUTE_TO_CUSTOM);
}

event_route[tm:local-request]
{
    setflag(FLAG_LOCAL_REQUEST);
    xlog("L_DEBUG", "$ci|local|start $pr request $rm $ou\n");
    xlog("L_DEBUG", "$ci|local|source $si:$sp -> $dd:$dp\n");
    xlog("L_DEBUG", "$ci|local|from $fu\n");
    xlog("L_DEBUG", "$ci|local|to $tu\n");

    #!ifdef SIP_TRACE_ROLE
    route(SIP_TRACE);
    #!endif

    routes("KZ_LOCAL_$(rm)_");

}

event_route[evrexec:DEFERRED_INIT]
{
    xlog("L_INFO", "processing deferred init\n");
    routes("KZ_DEFERRED_INIT_");
}

route[LOCAL_REQUEST]
{
    if(src_ip != myself || $hdr(X-TM-Local) == $null) {
       return;
    }

    xlog("L_DEBUG", "internal route $hdr(X-TM-Local)\n");

    setflag(FLAG_LOCAL_ROUTE);

    #!ifdef SIP_TRACE_ROLE
    route(SIP_TRACE);
    #!endif

    $var(LocalRoute) = $hdr(X-TM-Local);
    remove_hf_re("^X-TM-Local");
    route_if_exists("$var(LocalRoute)");
    exit;
}

route[REMOVE_RESERVED_HEADERS]
{
    remove_hf_re_pv("$sel(cfg_get.kazoo.reserved_headers)");
}

# vim: tabstop=4 softtabstop=4 shiftwidth=4 expandtab
